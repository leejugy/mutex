
led_toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006834  08006834  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006834  08006834  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006834  08006834  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800683c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c38  2000006c  080068a8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  080068a8  00021ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017de9  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039c8  00000000  00000000  00037ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff9  00000000  00000000  0003cd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2b3  00000000  00000000  0003dd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191e4  00000000  00000000  00058fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009607d  00000000  00000000  000721c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cac  00000000  00000000  00108248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010def4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080066e4 	.word	0x080066e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080066e4 	.word	0x080066e4

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <MX_DMA_Init+0x38>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a0b      	ldr	r2, [pc, #44]	; (8000188 <MX_DMA_Init+0x38>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b09      	ldr	r3, [pc, #36]	; (8000188 <MX_DMA_Init+0x38>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200f      	movs	r0, #15
 8000174:	f000 fd5d 	bl	8000c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000178:	200f      	movs	r0, #15
 800017a:	f000 fd76 	bl	8000c6a <HAL_NVIC_EnableIRQ>

}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
extern HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout);

int __io_putchar(int ch){
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,100);
 8000194:	1d39      	adds	r1, r7, #4
 8000196:	2364      	movs	r3, #100	; 0x64
 8000198:	2201      	movs	r2, #1
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <__io_putchar+0x20>)
 800019c:	f001 ff7c 	bl	8002098 <HAL_UART_Transmit>
	return 0;
 80001a0:	2300      	movs	r3, #0
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	200000e8 	.word	0x200000e8

080001b0 <HAL_GPIO_EXTI_Callback>:
	uart_flag=true;
	UNUSED(huart);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13){
 80001ba:	88fb      	ldrh	r3, [r7, #6]
 80001bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001c0:	d102      	bne.n	80001c8 <HAL_GPIO_EXTI_Callback+0x18>
		begin=true;
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	701a      	strb	r2, [r3, #0]
	}
  UNUSED(GPIO_Pin);
}
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	2000008a 	.word	0x2000008a

080001d8 <counter>:

void counter(uint8_t task_numb){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	printf("task%d counter begin\n",task_numb);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4619      	mov	r1, r3
 80001e6:	4811      	ldr	r0, [pc, #68]	; (800022c <counter+0x54>)
 80001e8:	f005 fb9a 	bl	8005920 <iprintf>
	for(uint8_t i=0;i<5;i++){
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]
 80001f0:	e011      	b.n	8000216 <counter+0x3e>
		printf("count:%d\n",++count);
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <counter+0x58>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <counter+0x58>)
 80001fc:	801a      	strh	r2, [r3, #0]
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <counter+0x58>)
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	4619      	mov	r1, r3
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <counter+0x5c>)
 8000206:	f005 fb8b 	bl	8005920 <iprintf>
		HAL_Delay(100);
 800020a:	2064      	movs	r0, #100	; 0x64
 800020c:	f000 fc38 	bl	8000a80 <HAL_Delay>
	for(uint8_t i=0;i<5;i++){
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	3301      	adds	r3, #1
 8000214:	73fb      	strb	r3, [r7, #15]
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2b04      	cmp	r3, #4
 800021a:	d9ea      	bls.n	80001f2 <counter+0x1a>
	}
	count=0;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <counter+0x58>)
 800021e:	2200      	movs	r2, #0
 8000220:	801a      	strh	r2, [r3, #0]
}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	08006728 	.word	0x08006728
 8000230:	20000088 	.word	0x20000088
 8000234:	08006740 	.word	0x08006740

08000238 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutex_counter */
  mutex_counterHandle = osMutexNew(&mutex_counter_attributes);
 800023c:	480f      	ldr	r0, [pc, #60]	; (800027c <MX_FREERTOS_Init+0x44>)
 800023e:	f002 f9e9 	bl	8002614 <osMutexNew>
 8000242:	4603      	mov	r3, r0
 8000244:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <MX_FREERTOS_Init+0x48>)
 8000246:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (4, sizeof(uint8_t), &myQueue01_attributes);
 8000248:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <MX_FREERTOS_Init+0x4c>)
 800024a:	2101      	movs	r1, #1
 800024c:	2004      	movs	r0, #4
 800024e:	f002 fb29 	bl	80028a4 <osMessageQueueNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <MX_FREERTOS_Init+0x50>)
 8000256:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of led1 */
  led1Handle = osThreadNew(StartDefaultTask, NULL, &led1_attributes);
 8000258:	4a0c      	ldr	r2, [pc, #48]	; (800028c <MX_FREERTOS_Init+0x54>)
 800025a:	2100      	movs	r1, #0
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <MX_FREERTOS_Init+0x58>)
 800025e:	f002 f901 	bl	8002464 <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <MX_FREERTOS_Init+0x5c>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of led2 */
  led2Handle = osThreadNew(StartTask02, NULL, &led2_attributes);
 8000268:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <MX_FREERTOS_Init+0x60>)
 800026a:	2100      	movs	r1, #0
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <MX_FREERTOS_Init+0x64>)
 800026e:	f002 f8f9 	bl	8002464 <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <MX_FREERTOS_Init+0x68>)
 8000276:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	080067c4 	.word	0x080067c4
 8000280:	20000098 	.word	0x20000098
 8000284:	080067ac 	.word	0x080067ac
 8000288:	20000094 	.word	0x20000094
 800028c:	08006764 	.word	0x08006764
 8000290:	080002a5 	.word	0x080002a5
 8000294:	2000008c 	.word	0x2000008c
 8000298:	08006788 	.word	0x08006788
 800029c:	08000315 	.word	0x08000315
 80002a0:	20000090 	.word	0x20000090

080002a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t pretime=HAL_GetTick();
 80002ac:	f000 fbde 	bl	8000a6c <HAL_GetTick>
 80002b0:	60f8      	str	r0, [r7, #12]
	osStatus_t mutex_state=osOK;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GetTick()-pretime>100){
 80002b6:	f000 fbd9 	bl	8000a6c <HAL_GetTick>
 80002ba:	4602      	mov	r2, r0
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	2b64      	cmp	r3, #100	; 0x64
 80002c2:	d906      	bls.n	80002d2 <StartDefaultTask+0x2e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002c4:	2120      	movs	r1, #32
 80002c6:	4810      	ldr	r0, [pc, #64]	; (8000308 <StartDefaultTask+0x64>)
 80002c8:	f000 ffda 	bl	8001280 <HAL_GPIO_TogglePin>
		pretime=HAL_GetTick();
 80002cc:	f000 fbce 	bl	8000a6c <HAL_GetTick>
 80002d0:	60f8      	str	r0, [r7, #12]
	}
	mutex_state = osMutexAcquire(mutex_counterHandle,osWaitForever);
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <StartDefaultTask+0x68>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 31ff 	mov.w	r1, #4294967295
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fa34 	bl	8002748 <osMutexAcquire>
 80002e0:	60b8      	str	r0, [r7, #8]
	if(mutex_state==osOK){
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d10b      	bne.n	8000300 <StartDefaultTask+0x5c>
		if(begin){
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <StartDefaultTask+0x6c>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <StartDefaultTask+0x52>
			counter(1);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f7ff ff71 	bl	80001d8 <counter>
		}
		osMutexRelease(mutex_counterHandle);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <StartDefaultTask+0x68>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fa82 	bl	8002804 <osMutexRelease>
	}
	osDelay(1);
 8000300:	2001      	movs	r0, #1
 8000302:	f002 f959 	bl	80025b8 <osDelay>
	if(HAL_GetTick()-pretime>100){
 8000306:	e7d6      	b.n	80002b6 <StartDefaultTask+0x12>
 8000308:	40010800 	.word	0x40010800
 800030c:	20000098 	.word	0x20000098
 8000310:	2000008a 	.word	0x2000008a

08000314 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	uint32_t pretime=HAL_GetTick();
 800031c:	f000 fba6 	bl	8000a6c <HAL_GetTick>
 8000320:	60f8      	str	r0, [r7, #12]
	osStatus_t mutex_state=osOK;
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if(HAL_GetTick()-pretime>100){
 8000326:	f000 fba1 	bl	8000a6c <HAL_GetTick>
 800032a:	4602      	mov	r2, r0
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	2b64      	cmp	r3, #100	; 0x64
 8000332:	d907      	bls.n	8000344 <StartTask02+0x30>
	  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000338:	4810      	ldr	r0, [pc, #64]	; (800037c <StartTask02+0x68>)
 800033a:	f000 ffa1 	bl	8001280 <HAL_GPIO_TogglePin>
	  	  pretime=HAL_GetTick();
 800033e:	f000 fb95 	bl	8000a6c <HAL_GetTick>
 8000342:	60f8      	str	r0, [r7, #12]
	  }
	  mutex_state = osMutexAcquire(mutex_counterHandle,osWaitForever);
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <StartTask02+0x6c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	4618      	mov	r0, r3
 800034e:	f002 f9fb 	bl	8002748 <osMutexAcquire>
 8000352:	60b8      	str	r0, [r7, #8]
	  if(mutex_state==osOK){
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10b      	bne.n	8000372 <StartTask02+0x5e>
			if(begin){
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <StartTask02+0x70>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d002      	beq.n	8000368 <StartTask02+0x54>
				counter(2);
 8000362:	2002      	movs	r0, #2
 8000364:	f7ff ff38 	bl	80001d8 <counter>
			}
		  osMutexRelease(mutex_counterHandle);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <StartTask02+0x6c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fa49 	bl	8002804 <osMutexRelease>
	  }
	  osDelay(1);
 8000372:	2001      	movs	r0, #1
 8000374:	f002 f920 	bl	80025b8 <osDelay>
	  if(HAL_GetTick()-pretime>100){
 8000378:	e7d5      	b.n	8000326 <StartTask02+0x12>
 800037a:	bf00      	nop
 800037c:	40010c00 	.word	0x40010c00
 8000380:	20000098 	.word	0x20000098
 8000384:	2000008a 	.word	0x2000008a

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b38      	ldr	r3, [pc, #224]	; (8000480 <MX_GPIO_Init+0xf8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a37      	ldr	r2, [pc, #220]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b35      	ldr	r3, [pc, #212]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b4:	4b32      	ldr	r3, [pc, #200]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a31      	ldr	r2, [pc, #196]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a2b      	ldr	r2, [pc, #172]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b29      	ldr	r3, [pc, #164]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a25      	ldr	r2, [pc, #148]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2120      	movs	r1, #32
 8000400:	4820      	ldr	r0, [pc, #128]	; (8000484 <MX_GPIO_Init+0xfc>)
 8000402:	f000 ff25 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040c:	481e      	ldr	r0, [pc, #120]	; (8000488 <MX_GPIO_Init+0x100>)
 800040e:	f000 ff1f 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <MX_GPIO_Init+0x104>)
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	481a      	ldr	r0, [pc, #104]	; (8000490 <MX_GPIO_Init+0x108>)
 8000428:	f000 fd8e 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800042c:	2320      	movs	r3, #32
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2302      	movs	r3, #2
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4810      	ldr	r0, [pc, #64]	; (8000484 <MX_GPIO_Init+0xfc>)
 8000444:	f000 fd80 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2302      	movs	r3, #2
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4809      	ldr	r0, [pc, #36]	; (8000488 <MX_GPIO_Init+0x100>)
 8000462:	f000 fd71 	bl	8000f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2105      	movs	r1, #5
 800046a:	2028      	movs	r0, #40	; 0x28
 800046c:	f000 fbe1 	bl	8000c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000470:	2028      	movs	r0, #40	; 0x28
 8000472:	f000 fbfa 	bl	8000c6a <HAL_NVIC_EnableIRQ>

}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	40010c00 	.word	0x40010c00
 800048c:	10210000 	.word	0x10210000
 8000490:	40011000 	.word	0x40011000

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000498:	f000 fac0 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049c:	f000 f80d 	bl	80004ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a0:	f7ff ff72 	bl	8000388 <MX_GPIO_Init>
  MX_DMA_Init();
 80004a4:	f7ff fe54 	bl	8000150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004a8:	f000 f9f2 	bl	8000890 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ac:	f001 ff74 	bl	8002398 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80004b0:	f7ff fec2 	bl	8000238 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004b4:	f001 ffa2 	bl	80023fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <main+0x24>

080004ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b090      	sub	sp, #64	; 0x40
 80004be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	2228      	movs	r2, #40	; 0x28
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f005 fa7e 	bl	80059ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004dc:	2301      	movs	r3, #1
 80004de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ea:	2301      	movs	r3, #1
 80004ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	2302      	movs	r3, #2
 80004f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	4618      	mov	r0, r3
 8000504:	f000 feee 	bl	80012e4 <HAL_RCC_OscConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800050e:	f000 f82b 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	230f      	movs	r3, #15
 8000514:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000516:	2302      	movs	r3, #2
 8000518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800051e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2102      	movs	r1, #2
 800052c:	4618      	mov	r0, r3
 800052e:	f001 f95b 	bl	80017e8 <HAL_RCC_ClockConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000538:	f000 f816 	bl	8000568 <Error_Handler>
  }
}
 800053c:	bf00      	nop
 800053e:	3740      	adds	r7, #64	; 0x40
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d101      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000556:	f000 fa77 	bl	8000a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40000800 	.word	0x40000800

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_MspInit+0x68>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <HAL_MspInit+0x68>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_MspInit+0x68>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_MspInit+0x68>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <HAL_MspInit+0x68>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x68>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	210f      	movs	r1, #15
 80005ae:	f06f 0001 	mvn.w	r0, #1
 80005b2:	f000 fb3e 	bl	8000c32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_MspInit+0x6c>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_MspInit+0x6c>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08e      	sub	sp, #56	; 0x38
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <HAL_InitTick+0xe8>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a33      	ldr	r2, [pc, #204]	; (80006cc <HAL_InitTick+0xe8>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <HAL_InitTick+0xe8>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000612:	f107 0210 	add.w	r2, r7, #16
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fa53 	bl	8001ac8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000628:	2b00      	cmp	r3, #0
 800062a:	d103      	bne.n	8000634 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800062c:	f001 fa24 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8000630:	6378      	str	r0, [r7, #52]	; 0x34
 8000632:	e004      	b.n	800063e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000634:	f001 fa20 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8000638:	4603      	mov	r3, r0
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800063e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000640:	4a23      	ldr	r2, [pc, #140]	; (80006d0 <HAL_InitTick+0xec>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	0c9b      	lsrs	r3, r3, #18
 8000648:	3b01      	subs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <HAL_InitTick+0xf0>)
 800064e:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <HAL_InitTick+0xf4>)
 8000650:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <HAL_InitTick+0xf0>)
 8000654:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000658:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800065a:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <HAL_InitTick+0xf0>)
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0xf0>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_InitTick+0xf0>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_InitTick+0xf0>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000672:	4818      	ldr	r0, [pc, #96]	; (80006d4 <HAL_InitTick+0xf0>)
 8000674:	f001 fa76 	bl	8001b64 <HAL_TIM_Base_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800067e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000682:	2b00      	cmp	r3, #0
 8000684:	d11b      	bne.n	80006be <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000686:	4813      	ldr	r0, [pc, #76]	; (80006d4 <HAL_InitTick+0xf0>)
 8000688:	f001 fac4 	bl	8001c14 <HAL_TIM_Base_Start_IT>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000696:	2b00      	cmp	r3, #0
 8000698:	d111      	bne.n	80006be <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800069a:	201e      	movs	r0, #30
 800069c:	f000 fae5 	bl	8000c6a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b0f      	cmp	r3, #15
 80006a4:	d808      	bhi.n	80006b8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006a6:	2200      	movs	r2, #0
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	201e      	movs	r0, #30
 80006ac:	f000 fac1 	bl	8000c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006b0:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <HAL_InitTick+0xf8>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	e002      	b.n	80006be <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3738      	adds	r7, #56	; 0x38
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	431bde83 	.word	0x431bde83
 80006d4:	2000009c 	.word	0x2000009c
 80006d8:	40000800 	.word	0x40000800
 80006dc:	20000004 	.word	0x20000004

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
	...

0800070c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <DMA1_Channel5_IRQHandler+0x10>)
 8000712:	f000 fb13 	bl	8000d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000130 	.word	0x20000130

08000720 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <TIM4_IRQHandler+0x10>)
 8000726:	f001 fac7 	bl	8001cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000009c 	.word	0x2000009c

08000734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800073c:	f000 fdba 	bl	80012b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e00a      	b.n	800076c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000756:	f3af 8000 	nop.w
 800075a:	4601      	mov	r1, r0
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	b2ca      	uxtb	r2, r1
 8000764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbf0      	blt.n	8000756 <_read+0x12>
  }

  return len;
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e009      	b.n	80007a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	60ba      	str	r2, [r7, #8]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fcf7 	bl	800018c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf1      	blt.n	8000790 <_write+0x12>
  }
  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_close>:

int _close(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007dc:	605a      	str	r2, [r3, #4]
  return 0;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <_isatty>:

int _isatty(int file)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f005 f964 	bl	8005b14 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20005000 	.word	0x20005000
 8000878:	00000400 	.word	0x00000400
 800087c:	200000e4 	.word	0x200000e4
 8000880:	20001ca8 	.word	0x20001ca8

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART1_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c8:	f001 fb96 	bl	8001ff8 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f7ff fe49 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	40013800 	.word	0x40013800

080008e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <HAL_UART_MspInit+0xd8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d157      	bne.n	80009b4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <HAL_UART_MspInit+0xdc>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <HAL_UART_MspInit+0xdc>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <HAL_UART_MspInit+0xdc>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <HAL_UART_MspInit+0xdc>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <HAL_UART_MspInit+0xdc>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <HAL_UART_MspInit+0xdc>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	481e      	ldr	r0, [pc, #120]	; (80009c4 <HAL_UART_MspInit+0xe0>)
 800094a:	f000 fafd 	bl	8000f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4818      	ldr	r0, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0xe0>)
 8000964:	f000 faf0 	bl	8000f48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <HAL_UART_MspInit+0xe8>)
 800096c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 800098e:	2220      	movs	r2, #32
 8000990:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 800099a:	f000 f975 	bl	8000c88 <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80009a4:	f7ff fde0 	bl	8000568 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_UART_MspInit+0xe4>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40013800 	.word	0x40013800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800
 80009c8:	20000130 	.word	0x20000130
 80009cc:	40020058 	.word	0x40020058

080009d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d0:	f7ff ff58 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ec:	4c09      	ldr	r4, [pc, #36]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f005 f891 	bl	8005b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fd49 	bl	8000494 <main>
  bx lr
 8000a02:	4770      	bx	lr
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a0c:	0800683c 	.word	0x0800683c
  ldr r2, =_sbss
 8000a10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a14:	20001ca4 	.word	0x20001ca4

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x28>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f8f5 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	200f      	movs	r0, #15
 8000a34:	f7ff fdd6 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff fd9c 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000174 	.word	0x20000174

08000a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000174 	.word	0x20000174

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff0 	bl	8000a6c <HAL_GetTick>
 8000a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa6:	bf00      	nop
 8000aa8:	f7ff ffe0 	bl	8000a6c <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db0b      	blt.n	8000b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	f003 021f 	and.w	r2, r3, #31
 8000b44:	4906      	ldr	r1, [pc, #24]	; (8000b60 <__NVIC_EnableIRQ+0x34>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff4f 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff64 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ffb2 	bl	8000bb8 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff81 	bl	8000b64 <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff57 	bl	8000b2c <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e043      	b.n	8000d26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <HAL_DMA_Init+0xa8>)
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <HAL_DMA_Init+0xac>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	091b      	lsrs	r3, r3, #4
 8000cb0:	009a      	lsls	r2, r3, #2
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <HAL_DMA_Init+0xb0>)
 8000cba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	bffdfff8 	.word	0xbffdfff8
 8000d34:	cccccccd 	.word	0xcccccccd
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	2204      	movs	r2, #4
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d04f      	beq.n	8000e04 <HAL_DMA_IRQHandler+0xc8>
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d04a      	beq.n	8000e04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d107      	bne.n	8000d8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0204 	bic.w	r2, r2, #4
 8000d8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a66      	ldr	r2, [pc, #408]	; (8000f2c <HAL_DMA_IRQHandler+0x1f0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d029      	beq.n	8000dea <HAL_DMA_IRQHandler+0xae>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a65      	ldr	r2, [pc, #404]	; (8000f30 <HAL_DMA_IRQHandler+0x1f4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d022      	beq.n	8000de6 <HAL_DMA_IRQHandler+0xaa>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a63      	ldr	r2, [pc, #396]	; (8000f34 <HAL_DMA_IRQHandler+0x1f8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01a      	beq.n	8000de0 <HAL_DMA_IRQHandler+0xa4>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a62      	ldr	r2, [pc, #392]	; (8000f38 <HAL_DMA_IRQHandler+0x1fc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d012      	beq.n	8000dda <HAL_DMA_IRQHandler+0x9e>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a60      	ldr	r2, [pc, #384]	; (8000f3c <HAL_DMA_IRQHandler+0x200>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00a      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x98>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a5f      	ldr	r2, [pc, #380]	; (8000f40 <HAL_DMA_IRQHandler+0x204>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d102      	bne.n	8000dce <HAL_DMA_IRQHandler+0x92>
 8000dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dcc:	e00e      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dd2:	e00b      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dd8:	e008      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dde:	e005      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de4:	e002      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000de6:	2340      	movs	r3, #64	; 0x40
 8000de8:	e000      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dea:	2304      	movs	r3, #4
 8000dec:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <HAL_DMA_IRQHandler+0x208>)
 8000dee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 8094 	beq.w	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e02:	e08e      	b.n	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	2202      	movs	r2, #2
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d056      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x186>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d051      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10b      	bne.n	8000e44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020a 	bic.w	r2, r2, #10
 8000e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <HAL_DMA_IRQHandler+0x1f0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d029      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0x166>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <HAL_DMA_IRQHandler+0x1f4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d022      	beq.n	8000e9e <HAL_DMA_IRQHandler+0x162>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a35      	ldr	r2, [pc, #212]	; (8000f34 <HAL_DMA_IRQHandler+0x1f8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01a      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x15c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <HAL_DMA_IRQHandler+0x1fc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d012      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x156>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a32      	ldr	r2, [pc, #200]	; (8000f3c <HAL_DMA_IRQHandler+0x200>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00a      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x150>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <HAL_DMA_IRQHandler+0x204>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d102      	bne.n	8000e86 <HAL_DMA_IRQHandler+0x14a>
 8000e80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e84:	e00e      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e8a:	e00b      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e90:	e008      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	e005      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e9c:	e002      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	e000      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_DMA_IRQHandler+0x208>)
 8000ea6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d034      	beq.n	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ec0:	e02f      	b.n	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d028      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x1e8>
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d023      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 020e 	bic.w	r2, r2, #14
 8000eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	4798      	blx	r3
    }
  }
  return;
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
}
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020008 	.word	0x40020008
 8000f30:	4002001c 	.word	0x4002001c
 8000f34:	40020030 	.word	0x40020030
 8000f38:	40020044 	.word	0x40020044
 8000f3c:	40020058 	.word	0x40020058
 8000f40:	4002006c 	.word	0x4002006c
 8000f44:	40020000 	.word	0x40020000

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b08b      	sub	sp, #44	; 0x2c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e169      	b.n	8001230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 8158 	bne.w	800122a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a9a      	ldr	r2, [pc, #616]	; (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d05e      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f84:	4a98      	ldr	r2, [pc, #608]	; (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d875      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f8a:	4a98      	ldr	r2, [pc, #608]	; (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d058      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f90:	4a96      	ldr	r2, [pc, #600]	; (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d86f      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f96:	4a96      	ldr	r2, [pc, #600]	; (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d052      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a94      	ldr	r2, [pc, #592]	; (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d869      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a94      	ldr	r2, [pc, #592]	; (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d04c      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a92      	ldr	r2, [pc, #584]	; (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d863      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fae:	4a92      	ldr	r2, [pc, #584]	; (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d046      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a90      	ldr	r2, [pc, #576]	; (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d85d      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fba:	2b12      	cmp	r3, #18
 8000fbc:	d82a      	bhi.n	8001014 <HAL_GPIO_Init+0xcc>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d859      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <HAL_GPIO_Init+0x80>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001043 	.word	0x08001043
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	0800102f 	.word	0x0800102f
 8000fd4:	08001071 	.word	0x08001071
 8000fd8:	08001077 	.word	0x08001077
 8000fdc:	08001077 	.word	0x08001077
 8000fe0:	08001077 	.word	0x08001077
 8000fe4:	08001077 	.word	0x08001077
 8000fe8:	08001077 	.word	0x08001077
 8000fec:	08001077 	.word	0x08001077
 8000ff0:	08001077 	.word	0x08001077
 8000ff4:	08001077 	.word	0x08001077
 8000ff8:	08001077 	.word	0x08001077
 8000ffc:	08001077 	.word	0x08001077
 8001000:	08001077 	.word	0x08001077
 8001004:	08001077 	.word	0x08001077
 8001008:	08001077 	.word	0x08001077
 800100c:	08001025 	.word	0x08001025
 8001010:	08001039 	.word	0x08001039
 8001014:	4a79      	ldr	r2, [pc, #484]	; (80011fc <HAL_GPIO_Init+0x2b4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101a:	e02c      	b.n	8001076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e029      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	3304      	adds	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e024      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e01f      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	330c      	adds	r3, #12
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e01a      	b.n	8001078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104a:	2304      	movs	r3, #4
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e013      	b.n	8001078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	611a      	str	r2, [r3, #16]
          break;
 8001062:	e009      	b.n	8001078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	615a      	str	r2, [r3, #20]
          break;
 800106e:	e003      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x130>
          break;
 8001076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d801      	bhi.n	8001082 <HAL_GPIO_Init+0x13a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	e001      	b.n	8001086 <HAL_GPIO_Init+0x13e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
 8001086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d802      	bhi.n	8001094 <HAL_GPIO_Init+0x14c>
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x152>
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	3b08      	subs	r3, #8
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	210f      	movs	r1, #15
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	6a39      	ldr	r1, [r7, #32]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	431a      	orrs	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80b1 	beq.w	800122a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c8:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b4a      	ldr	r3, [pc, #296]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <HAL_GPIO_Init+0x2bc>)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a40      	ldr	r2, [pc, #256]	; (8001208 <HAL_GPIO_Init+0x2c0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1ec>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3f      	ldr	r2, [pc, #252]	; (800120c <HAL_GPIO_Init+0x2c4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1e8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3e      	ldr	r2, [pc, #248]	; (8001210 <HAL_GPIO_Init+0x2c8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1e4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a3d      	ldr	r2, [pc, #244]	; (8001214 <HAL_GPIO_Init+0x2cc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1e0>
 8001124:	2303      	movs	r3, #3
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001128:	2304      	movs	r3, #4
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001134:	2300      	movs	r3, #0
 8001136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001146:	492f      	ldr	r1, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x2bc>)
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	492c      	ldr	r1, [pc, #176]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	608b      	str	r3, [r1, #8]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4928      	ldr	r1, [pc, #160]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	4922      	ldr	r1, [pc, #136]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	60cb      	str	r3, [r1, #12]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	491e      	ldr	r1, [pc, #120]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4918      	ldr	r1, [pc, #96]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4914      	ldr	r1, [pc, #80]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d021      	beq.n	800121c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	490e      	ldr	r1, [pc, #56]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e021      	b.n	800122a <HAL_GPIO_Init+0x2e2>
 80011e6:	bf00      	nop
 80011e8:	10320000 	.word	0x10320000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10220000 	.word	0x10220000
 80011f4:	10210000 	.word	0x10210000
 80011f8:	10120000 	.word	0x10120000
 80011fc:	10110000 	.word	0x10110000
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00
 8001210:	40011000 	.word	0x40011000
 8001214:	40011400 	.word	0x40011400
 8001218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_GPIO_Init+0x304>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	43db      	mvns	r3, r3
 8001224:	4909      	ldr	r1, [pc, #36]	; (800124c <HAL_GPIO_Init+0x304>)
 8001226:	4013      	ands	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	3301      	adds	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	f47f ae8e 	bne.w	8000f5c <HAL_GPIO_Init+0x14>
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	372c      	adds	r7, #44	; 0x2c
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	611a      	str	r2, [r3, #16]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43d9      	mvns	r1, r3
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	400b      	ands	r3, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7fe ff6c 	bl	80001b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e272      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8087 	beq.w	8001412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001304:	4b92      	ldr	r3, [pc, #584]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b04      	cmp	r3, #4
 800130e:	d00c      	beq.n	800132a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001310:	4b8f      	ldr	r3, [pc, #572]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	d112      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
 800131c:	4b8c      	ldr	r3, [pc, #560]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d10b      	bne.n	8001342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132a:	4b89      	ldr	r3, [pc, #548]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d06c      	beq.n	8001410 <HAL_RCC_OscConfig+0x12c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d168      	bne.n	8001410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e24c      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x76>
 800134c:	4b80      	ldr	r3, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a7f      	ldr	r2, [pc, #508]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e02e      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x98>
 8001362:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a7a      	ldr	r2, [pc, #488]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a77      	ldr	r2, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0xbc>
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a71      	ldr	r2, [pc, #452]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6e      	ldr	r2, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xd4>
 80013a0:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a6a      	ldr	r2, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a67      	ldr	r2, [pc, #412]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb54 	bl	8000a6c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb50 	bl	8000a6c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e200      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe4>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb40 	bl	8000a6c <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb3c 	bl	8000a6c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1ec      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x10c>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d063      	beq.n	80014e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800142a:	4b49      	ldr	r3, [pc, #292]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b08      	cmp	r3, #8
 8001434:	d11c      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
 8001436:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d116      	bne.n	8001470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1c0      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4939      	ldr	r1, [pc, #228]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	e03a      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff faf5 	bl	8000a6c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff faf1 	bl	8000a6c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e1a1      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4927      	ldr	r1, [pc, #156]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fad4 	bl	8000a6c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fad0 	bl	8000a6c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e180      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03a      	beq.n	8001568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d019      	beq.n	800152e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fab4 	bl	8000a6c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff fab0 	bl	8000a6c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e160      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_RCC_OscConfig+0x26c>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 fafe 	bl	8001b28 <RCC_Delay>
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fa9a 	bl	8000a6c <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	e00f      	b.n	800155c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fa96 	bl	8000a6c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d908      	bls.n	800155c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e146      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	42420000 	.word	0x42420000
 8001558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e9      	bne.n	800153c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a6 	beq.w	80016c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a87      	ldr	r2, [pc, #540]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b82      	ldr	r3, [pc, #520]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fa57 	bl	8000a6c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff fa53 	bl	8000a6c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e103      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	4b75      	ldr	r3, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x4c8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x312>
 80015e8:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a6e      	ldr	r2, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e02d      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x334>
 80015fe:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a69      	ldr	r2, [pc, #420]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4b67      	ldr	r3, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4a66      	ldr	r2, [pc, #408]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6213      	str	r3, [r2, #32]
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x356>
 8001620:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a60      	ldr	r2, [pc, #384]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a5d      	ldr	r2, [pc, #372]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x36e>
 800163a:	4b5b      	ldr	r3, [pc, #364]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a5a      	ldr	r2, [pc, #360]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b58      	ldr	r3, [pc, #352]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a57      	ldr	r2, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fa07 	bl	8000a6c <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fa03 	bl	8000a6c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0b1      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x37e>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff f9f1 	bl	8000a6c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff f9ed 	bl	8000a6c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e09b      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a3b      	ldr	r2, [pc, #236]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8087 	beq.w	80017da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d061      	beq.n	800179c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d146      	bne.n	800176e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f9c1 	bl	8000a6c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff f9bd 	bl	8000a6c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e06d      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001714:	d108      	bne.n	8001728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4921      	ldr	r1, [pc, #132]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a19      	ldr	r1, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	430b      	orrs	r3, r1
 800173a:	491b      	ldr	r1, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff f991 	bl	8000a6c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff f98d 	bl	8000a6c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e03d      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x46a>
 800176c:	e035      	b.n	80017da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_RCC_OscConfig+0x4cc>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f97a 	bl	8000a6c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f976 	bl	8000a6c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e026      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x498>
 800179a:	e01e      	b.n	80017da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e019      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
 80017b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_OscConfig+0x500>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0d0      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d910      	bls.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4965      	ldr	r1, [pc, #404]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0b8      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800184e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	494d      	ldr	r1, [pc, #308]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d040      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e07f      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e073      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06b      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4936      	ldr	r1, [pc, #216]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff f8c8 	bl	8000a6c <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f8c4 	bl	8000a6c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e053      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d210      	bcs.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4922      	ldr	r1, [pc, #136]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e032      	b.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4916      	ldr	r1, [pc, #88]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	490e      	ldr	r1, [pc, #56]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001976:	f000 f821 	bl	80019bc <HAL_RCC_GetSysClockFreq>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	490a      	ldr	r1, [pc, #40]	; (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fe24 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	080067d4 	.word	0x080067d4
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d002      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x30>
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x36>
 80019ea:	e027      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ee:	613b      	str	r3, [r7, #16]
      break;
 80019f0:	e027      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0c9b      	lsrs	r3, r3, #18
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d010      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	0c5b      	lsrs	r3, r3, #17
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a1e:	fb03 f202 	mul.w	r2, r3, r2
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e004      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	613b      	str	r3, [r7, #16]
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3e:	613b      	str	r3, [r7, #16]
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	693b      	ldr	r3, [r7, #16]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	080067ec 	.word	0x080067ec
 8001a5c:	080067fc 	.word	0x080067fc
 8001a60:	003d0900 	.word	0x003d0900

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a7c:	f7ff fff2 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	080067e4 	.word	0x080067e4

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0adb      	lsrs	r3, r3, #11
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	080067e4 	.word	0x080067e4

08001ac8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_GetClockConfig+0x58>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_RCC_GetClockConfig+0x58>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_GetClockConfig+0x58>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_RCC_GetClockConfig+0x58>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0207 	and.w	r2, r3, #7
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40022000 	.word	0x40022000

08001b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <RCC_Delay+0x34>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <RCC_Delay+0x38>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0a5b      	lsrs	r3, r3, #9
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b44:	bf00      	nop
  }
  while (Delay --);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1e5a      	subs	r2, r3, #1
 8001b4a:	60fa      	str	r2, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f9      	bne.n	8001b44 <RCC_Delay+0x1c>
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	10624dd3 	.word	0x10624dd3

08001b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e041      	b.n	8001bfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f839 	bl	8001c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f000 f9b4 	bl	8001f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d001      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e03a      	b.n	8001ca2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_TIM_Base_Start_IT+0x98>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x58>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c56:	d009      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x58>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x58>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d111      	bne.n	8001c90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d010      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8e:	e007      	b.n	8001ca0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0202 	mvn.w	r2, #2
 8001ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8ed 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8e0 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8ef 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0204 	mvn.w	r2, #4
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8c3 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8b6 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8c5 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0208 	mvn.w	r2, #8
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f899 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f88c 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f89b 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0210 	mvn.w	r2, #16
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2208      	movs	r2, #8
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f86f 	bl	8001eda <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f862 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f871 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0201 	mvn.w	r2, #1
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fb84 	bl	8000544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d107      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8bf 	bl	8001fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e80:	2b40      	cmp	r3, #64	; 0x40
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f835 	bl	8001efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d107      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0220 	mvn.w	r2, #32
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f88a 	bl	8001fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <TIM_Base_SetConfig+0xb8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x30>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x30>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <TIM_Base_SetConfig+0xbc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x30>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <TIM_Base_SetConfig+0xc0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <TIM_Base_SetConfig+0xb8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00b      	beq.n	8001f72 <TIM_Base_SetConfig+0x62>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d007      	beq.n	8001f72 <TIM_Base_SetConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <TIM_Base_SetConfig+0xbc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d003      	beq.n	8001f72 <TIM_Base_SetConfig+0x62>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <TIM_Base_SetConfig+0xc0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d108      	bne.n	8001f84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <TIM_Base_SetConfig+0xb8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d103      	bne.n	8001fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e042      	b.n	8002090 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fc60 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800203a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f91d 	bl	800227c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d16d      	bne.n	8002194 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_UART_Transmit+0x2c>
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e066      	b.n	8002196 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2221      	movs	r2, #33	; 0x21
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020d6:	f7fe fcc9 	bl	8000a6c <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	88fa      	ldrh	r2, [r7, #6]
 80020e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f0:	d108      	bne.n	8002104 <HAL_UART_Transmit+0x6c>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	e003      	b.n	800210c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800210c:	e02a      	b.n	8002164 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f840 	bl	800219e <UART_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e036      	b.n	8002196 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10b      	bne.n	8002146 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800213c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	3302      	adds	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e007      	b.n	8002156 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	781a      	ldrb	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3301      	adds	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1cf      	bne.n	800210e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2200      	movs	r2, #0
 8002176:	2140      	movs	r1, #64	; 0x40
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f810 	bl	800219e <UART_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e006      	b.n	8002196 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b090      	sub	sp, #64	; 0x40
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ae:	e050      	b.n	8002252 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d04c      	beq.n	8002252 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <UART_WaitOnFlagUntilTimeout+0x30>
 80021be:	f7fe fc55 	bl	8000a6c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d241      	bcs.n	8002252 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	330c      	adds	r3, #12
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	e853 3f00 	ldrex	r3, [r3]
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	330c      	adds	r3, #12
 80021ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ee:	637a      	str	r2, [r7, #52]	; 0x34
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f6:	e841 2300 	strex	r3, r2, [r1]
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1e5      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3314      	adds	r3, #20
 8002208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	e853 3f00 	ldrex	r3, [r3]
 8002210:	613b      	str	r3, [r7, #16]
   return(result);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3314      	adds	r3, #20
 8002220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002222:	623a      	str	r2, [r7, #32]
 8002224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002226:	69f9      	ldr	r1, [r7, #28]
 8002228:	6a3a      	ldr	r2, [r7, #32]
 800222a:	e841 2300 	strex	r3, r2, [r1]
 800222e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1e5      	bne.n	8002202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e00f      	b.n	8002272 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4013      	ands	r3, r2
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	429a      	cmp	r2, r3
 800226e:	d09f      	beq.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3740      	adds	r7, #64	; 0x40
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022b6:	f023 030c 	bic.w	r3, r3, #12
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <UART_SetConfig+0x114>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d103      	bne.n	80022ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022e4:	f7ff fbdc 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	e002      	b.n	80022f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022ec:	f7ff fbc4 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 80022f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	009a      	lsls	r2, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	4a22      	ldr	r2, [pc, #136]	; (8002394 <UART_SetConfig+0x118>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	0119      	lsls	r1, r3, #4
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	009a      	lsls	r2, r3, #2
 800231c:	441a      	add	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fbb2 f2f3 	udiv	r2, r2, r3
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <UART_SetConfig+0x118>)
 800232a:	fba3 0302 	umull	r0, r3, r3, r2
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2064      	movs	r0, #100	; 0x64
 8002332:	fb00 f303 	mul.w	r3, r0, r3
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	3332      	adds	r3, #50	; 0x32
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <UART_SetConfig+0x118>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002348:	4419      	add	r1, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	009a      	lsls	r2, r3, #2
 8002354:	441a      	add	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <UART_SetConfig+0x118>)
 8002362:	fba3 0302 	umull	r0, r3, r3, r2
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2064      	movs	r0, #100	; 0x64
 800236a:	fb00 f303 	mul.w	r3, r0, r3
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	3332      	adds	r3, #50	; 0x32
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <UART_SetConfig+0x118>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	f003 020f 	and.w	r2, r3, #15
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	440a      	add	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013800 	.word	0x40013800
 8002394:	51eb851f 	.word	0x51eb851f

08002398 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800239e:	f3ef 8305 	mrs	r3, IPSR
 80023a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80023a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023aa:	f3ef 8310 	mrs	r3, PRIMASK
 80023ae:	607b      	str	r3, [r7, #4]
  return(result);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <osKernelInitialize+0x32>
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <osKernelInitialize+0x60>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d109      	bne.n	80023d2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023be:	f3ef 8311 	mrs	r3, BASEPRI
 80023c2:	603b      	str	r3, [r7, #0]
  return(result);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80023ca:	f06f 0305 	mvn.w	r3, #5
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e00c      	b.n	80023ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <osKernelInitialize+0x60>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <osKernelInitialize+0x60>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e002      	b.n	80023ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000178 	.word	0x20000178

080023fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002402:	f3ef 8305 	mrs	r3, IPSR
 8002406:	60bb      	str	r3, [r7, #8]
  return(result);
 8002408:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240e:	f3ef 8310 	mrs	r3, PRIMASK
 8002412:	607b      	str	r3, [r7, #4]
  return(result);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <osKernelStart+0x32>
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <osKernelStart+0x64>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d109      	bne.n	8002436 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002422:	f3ef 8311 	mrs	r3, BASEPRI
 8002426:	603b      	str	r3, [r7, #0]
  return(result);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <osKernelStart+0x3a>
    stat = osErrorISR;
 800242e:	f06f 0305 	mvn.w	r3, #5
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e00e      	b.n	8002454 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <osKernelStart+0x64>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <osKernelStart+0x64>)
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002444:	f001 fc78 	bl	8003d38 <vTaskStartScheduler>
      stat = osOK;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e002      	b.n	8002454 <osKernelStart+0x58>
    } else {
      stat = osError;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002454:	68fb      	ldr	r3, [r7, #12]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000178 	.word	0x20000178

08002464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b092      	sub	sp, #72	; 0x48
 8002468:	af04      	add	r7, sp, #16
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002474:	f3ef 8305 	mrs	r3, IPSR
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 8094 	bne.w	80025aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002482:	f3ef 8310 	mrs	r3, PRIMASK
 8002486:	623b      	str	r3, [r7, #32]
  return(result);
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 808d 	bne.w	80025aa <osThreadNew+0x146>
 8002490:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <osThreadNew+0x150>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d106      	bne.n	80024a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002498:	f3ef 8311 	mrs	r3, BASEPRI
 800249c:	61fb      	str	r3, [r7, #28]
  return(result);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 8082 	bne.w	80025aa <osThreadNew+0x146>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d07e      	beq.n	80025aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80024b0:	2318      	movs	r3, #24
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80024b4:	2300      	movs	r3, #0
 80024b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80024b8:	f107 031b 	add.w	r3, r7, #27
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d045      	beq.n	8002556 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <osThreadNew+0x74>
        name = attr->name;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <osThreadNew+0x9a>
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	2b38      	cmp	r3, #56	; 0x38
 80024f0:	d805      	bhi.n	80024fe <osThreadNew+0x9a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <osThreadNew+0x9e>
        return (NULL);
 80024fe:	2300      	movs	r3, #0
 8002500:	e054      	b.n	80025ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00e      	beq.n	8002538 <osThreadNew+0xd4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2ba7      	cmp	r3, #167	; 0xa7
 8002520:	d90a      	bls.n	8002538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <osThreadNew+0xd4>
        mem = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 8002536:	e010      	b.n	800255a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10c      	bne.n	800255a <osThreadNew+0xf6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d108      	bne.n	800255a <osThreadNew+0xf6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d104      	bne.n	800255a <osThreadNew+0xf6>
          mem = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
 8002554:	e001      	b.n	800255a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	2b01      	cmp	r3, #1
 800255e:	d110      	bne.n	8002582 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002568:	9202      	str	r2, [sp, #8]
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f001 f9fa 	bl	8003970 <xTaskCreateStatic>
 800257c:	4603      	mov	r3, r0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e013      	b.n	80025aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d110      	bne.n	80025aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	b29a      	uxth	r2, r3
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f001 fa44 	bl	8003a28 <xTaskCreate>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <osThreadNew+0x146>
          hTask = NULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025aa:	697b      	ldr	r3, [r7, #20]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3738      	adds	r7, #56	; 0x38
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000178 	.word	0x20000178

080025b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c0:	f3ef 8305 	mrs	r3, IPSR
 80025c4:	613b      	str	r3, [r7, #16]
  return(result);
 80025c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025cc:	f3ef 8310 	mrs	r3, PRIMASK
 80025d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <osDelay+0x34>
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <osDelay+0x58>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d109      	bne.n	80025f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025e0:	f3ef 8311 	mrs	r3, BASEPRI
 80025e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <osDelay+0x3c>
    stat = osErrorISR;
 80025ec:	f06f 0305 	mvn.w	r3, #5
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e007      	b.n	8002604 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <osDelay+0x4c>
      vTaskDelay(ticks);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f001 fb66 	bl	8003cd0 <vTaskDelay>
    }
  }

  return (stat);
 8002604:	697b      	ldr	r3, [r7, #20]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000178 	.word	0x20000178

08002614 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002620:	f3ef 8305 	mrs	r3, IPSR
 8002624:	613b      	str	r3, [r7, #16]
  return(result);
 8002626:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8085 	bne.w	8002738 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262e:	f3ef 8310 	mrs	r3, PRIMASK
 8002632:	60fb      	str	r3, [r7, #12]
  return(result);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d17e      	bne.n	8002738 <osMutexNew+0x124>
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <osMutexNew+0x130>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d105      	bne.n	800264e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002642:	f3ef 8311 	mrs	r3, BASEPRI
 8002646:	60bb      	str	r3, [r7, #8]
  return(result);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d174      	bne.n	8002738 <osMutexNew+0x124>
    if (attr != NULL) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <osMutexNew+0x48>
      type = attr->attr_bits;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	e001      	b.n	8002660 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <osMutexNew+0x5c>
      rmtx = 1U;
 800266a:	2301      	movs	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e001      	b.n	8002674 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d15c      	bne.n	8002738 <osMutexNew+0x124>
      mem = -1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <osMutexNew+0x8c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b4f      	cmp	r3, #79	; 0x4f
 8002698:	d902      	bls.n	80026a0 <osMutexNew+0x8c>
          mem = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e00c      	b.n	80026ba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d108      	bne.n	80026ba <osMutexNew+0xa6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <osMutexNew+0xa6>
            mem = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e001      	b.n	80026ba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d112      	bne.n	80026e6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4619      	mov	r1, r3
 80026cc:	2004      	movs	r0, #4
 80026ce:	f000 fbc3 	bl	8002e58 <xQueueCreateMutexStatic>
 80026d2:	6278      	str	r0, [r7, #36]	; 0x24
 80026d4:	e016      	b.n	8002704 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4619      	mov	r1, r3
 80026dc:	2001      	movs	r0, #1
 80026de:	f000 fbbb 	bl	8002e58 <xQueueCreateMutexStatic>
 80026e2:	6278      	str	r0, [r7, #36]	; 0x24
 80026e4:	e00e      	b.n	8002704 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80026f2:	2004      	movs	r0, #4
 80026f4:	f000 fb98 	bl	8002e28 <xQueueCreateMutex>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24
 80026fa:	e003      	b.n	8002704 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80026fc:	2001      	movs	r0, #1
 80026fe:	f000 fb93 	bl	8002e28 <xQueueCreateMutex>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <osMutexNew+0x110>
        if (attr != NULL) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <osMutexNew+0x104>
          name = attr->name;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e001      	b.n	800271c <osMutexNew+0x108>
        } else {
          name = NULL;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800271c:	6979      	ldr	r1, [r7, #20]
 800271e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002720:	f001 f8ca 	bl	80038b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <osMutexNew+0x124>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800273a:	4618      	mov	r0, r3
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000178 	.word	0x20000178

08002748 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002766:	f3ef 8305 	mrs	r3, IPSR
 800276a:	613b      	str	r3, [r7, #16]
  return(result);
 800276c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002772:	f3ef 8310 	mrs	r3, PRIMASK
 8002776:	60fb      	str	r3, [r7, #12]
  return(result);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <osMutexAcquire+0x4a>
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <osMutexAcquire+0xb8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d109      	bne.n	800279a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002786:	f3ef 8311 	mrs	r3, BASEPRI
 800278a:	60bb      	str	r3, [r7, #8]
  return(result);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8002792:	f06f 0305 	mvn.w	r3, #5
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	e02c      	b.n	80027f4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d103      	bne.n	80027a8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80027a0:	f06f 0303 	mvn.w	r3, #3
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e025      	b.n	80027f4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d011      	beq.n	80027d2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	69b8      	ldr	r0, [r7, #24]
 80027b2:	f000 fba0 	bl	8002ef6 <xQueueTakeMutexRecursive>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d01b      	beq.n	80027f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80027c2:	f06f 0301 	mvn.w	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	e014      	b.n	80027f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80027ca:	f06f 0302 	mvn.w	r3, #2
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	e010      	b.n	80027f4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	69b8      	ldr	r0, [r7, #24]
 80027d6:	f000 fe3b 	bl	8003450 <xQueueSemaphoreTake>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d009      	beq.n	80027f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80027e6:	f06f 0301 	mvn.w	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	e002      	b.n	80027f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80027ee:	f06f 0302 	mvn.w	r3, #2
 80027f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80027f4:	69fb      	ldr	r3, [r7, #28]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000178 	.word	0x20000178

08002804 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002820:	f3ef 8305 	mrs	r3, IPSR
 8002824:	613b      	str	r3, [r7, #16]
  return(result);
 8002826:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10f      	bne.n	800284c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282c:	f3ef 8310 	mrs	r3, PRIMASK
 8002830:	60fb      	str	r3, [r7, #12]
  return(result);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <osMutexRelease+0x48>
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <osMutexRelease+0x9c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d109      	bne.n	8002854 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002840:	f3ef 8311 	mrs	r3, BASEPRI
 8002844:	60bb      	str	r3, [r7, #8]
  return(result);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <osMutexRelease+0x50>
    stat = osErrorISR;
 800284c:	f06f 0305 	mvn.w	r3, #5
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e01f      	b.n	8002894 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800285a:	f06f 0303 	mvn.w	r3, #3
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	e018      	b.n	8002894 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002868:	69b8      	ldr	r0, [r7, #24]
 800286a:	f000 fb10 	bl	8002e8e <xQueueGiveMutexRecursive>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d00f      	beq.n	8002894 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002874:	f06f 0302 	mvn.w	r3, #2
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e00b      	b.n	8002894 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800287c:	2300      	movs	r3, #0
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	69b8      	ldr	r0, [r7, #24]
 8002884:	f000 fb6e 	bl	8002f64 <xQueueGenericSend>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d002      	beq.n	8002894 <osMutexRelease+0x90>
        stat = osErrorResource;
 800288e:	f06f 0302 	mvn.w	r3, #2
 8002892:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8002894:	69fb      	ldr	r3, [r7, #28]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000178 	.word	0x20000178

080028a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b4:	f3ef 8305 	mrs	r3, IPSR
 80028b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80028ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d16f      	bne.n	80029a0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	617b      	str	r3, [r7, #20]
  return(result);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d169      	bne.n	80029a0 <osMessageQueueNew+0xfc>
 80028cc:	4b37      	ldr	r3, [pc, #220]	; (80029ac <osMessageQueueNew+0x108>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d105      	bne.n	80028e0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028d4:	f3ef 8311 	mrs	r3, BASEPRI
 80028d8:	613b      	str	r3, [r7, #16]
  return(result);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d15f      	bne.n	80029a0 <osMessageQueueNew+0xfc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d05c      	beq.n	80029a0 <osMessageQueueNew+0xfc>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d059      	beq.n	80029a0 <osMessageQueueNew+0xfc>
    mem = -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
 80028f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d029      	beq.n	800294c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <osMessageQueueNew+0x82>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b4f      	cmp	r3, #79	; 0x4f
 8002906:	d90e      	bls.n	8002926 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <osMessageQueueNew+0x82>
        mem = 1;
 8002920:	2301      	movs	r3, #1
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	e014      	b.n	8002950 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d110      	bne.n	8002950 <osMessageQueueNew+0xac>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <osMessageQueueNew+0xac>
          mem = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	e001      	b.n	8002950 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10b      	bne.n	800296e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2100      	movs	r1, #0
 8002960:	9100      	str	r1, [sp, #0]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f96d 	bl	8002c44 <xQueueGenericCreateStatic>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24
 800296c:	e008      	b.n	8002980 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002974:	2200      	movs	r2, #0
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f9da 	bl	8002d32 <xQueueGenericCreate>
 800297e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <osMessageQueueNew+0xf0>
        name = attr->name;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e001      	b.n	8002998 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002998:	69f9      	ldr	r1, [r7, #28]
 800299a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800299c:	f000 ff8c 	bl	80038b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000178 	.word	0x20000178

080029b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <vApplicationGetIdleTaskMemory+0x28>)
 80029c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4a05      	ldr	r2, [pc, #20]	; (80029dc <vApplicationGetIdleTaskMemory+0x2c>)
 80029c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	2000017c 	.word	0x2000017c
 80029dc:	20000224 	.word	0x20000224

080029e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <vApplicationGetTimerTaskMemory+0x2c>)
 80029f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <vApplicationGetTimerTaskMemory+0x30>)
 80029f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000424 	.word	0x20000424
 8002a10:	200004cc 	.word	0x200004cc

08002a14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f103 0208 	add.w	r2, r3, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f103 0208 	add.w	r2, r3, #8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f103 0208 	add.w	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac6:	d103      	bne.n	8002ad0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e00c      	b.n	8002aea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e002      	b.n	8002ade <vListInsert+0x2e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d2f6      	bcs.n	8002ad8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6852      	ldr	r2, [r2, #4]
 8002b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d103      	bne.n	8002b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	1e5a      	subs	r2, r3, #1
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
	...

08002b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b9e:	f002 fb25 	bl	80051ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	68f9      	ldr	r1, [r7, #12]
 8002bac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	441a      	add	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	441a      	add	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	22ff      	movs	r2, #255	; 0xff
 8002be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	22ff      	movs	r2, #255	; 0xff
 8002bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d114      	bne.n	8002c1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01a      	beq.n	8002c32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3310      	adds	r3, #16
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 fb35 	bl	8004270 <xTaskRemoveFromEventList>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <xQueueGenericReset+0xcc>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	e009      	b.n	8002c32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3310      	adds	r3, #16
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fef6 	bl	8002a14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fef1 	bl	8002a14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c32:	f002 fb0b 	bl	800524c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <xQueueGenericCreateStatic+0x52>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <xQueueGenericCreateStatic+0x56>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueGenericCreateStatic+0x58>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	623b      	str	r3, [r7, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <xQueueGenericCreateStatic+0x7e>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <xQueueGenericCreateStatic+0x82>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <xQueueGenericCreateStatic+0x84>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	61fb      	str	r3, [r7, #28]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ce2:	2350      	movs	r3, #80	; 0x50
 8002ce4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b50      	cmp	r3, #80	; 0x50
 8002cea:	d00a      	beq.n	8002d02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	61bb      	str	r3, [r7, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f843 	bl	8002dae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3730      	adds	r7, #48	; 0x30
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b08a      	sub	sp, #40	; 0x28
 8002d36:	af02      	add	r7, sp, #8
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	613b      	str	r3, [r7, #16]
}
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e004      	b.n	8002d72 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3350      	adds	r3, #80	; 0x50
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 fb38 	bl	80053ec <pvPortMalloc>
 8002d7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00f      	beq.n	8002da4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	3350      	adds	r3, #80	; 0x50
 8002d88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f805 	bl	8002dae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002da4:	69bb      	ldr	r3, [r7, #24]
	}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e002      	b.n	8002dd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ddc:	2101      	movs	r1, #1
 8002dde:	69b8      	ldr	r0, [r7, #24]
 8002de0:	f7ff fec8 	bl	8002b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00e      	beq.n	8002e20 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002e14:	2300      	movs	r3, #0
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8a2 	bl	8002f64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002e32:	2301      	movs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6939      	ldr	r1, [r7, #16]
 8002e40:	6978      	ldr	r0, [r7, #20]
 8002e42:	f7ff ff76 	bl	8002d32 <xQueueGenericCreate>
 8002e46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff ffd3 	bl	8002df4 <prvInitialiseMutex>

		return pxNewQueue;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	4603      	mov	r3, r0
 8002e60:	6039      	str	r1, [r7, #0]
 8002e62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002e64:	2301      	movs	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	6939      	ldr	r1, [r7, #16]
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7ff fee4 	bl	8002c44 <xQueueGenericCreateStatic>
 8002e7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7ff ffb8 	bl	8002df4 <prvInitialiseMutex>

		return pxNewQueue;
 8002e84:	68fb      	ldr	r3, [r7, #12]
	}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002e8e:	b590      	push	{r4, r7, lr}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	60fb      	str	r3, [r7, #12]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	685c      	ldr	r4, [r3, #4]
 8002eba:	f001 fb9f 	bl	80045fc <xTaskGetCurrentTaskHandle>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	429c      	cmp	r4, r3
 8002ec2:	d111      	bne.n	8002ee8 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	1e5a      	subs	r2, r3, #1
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	6938      	ldr	r0, [r7, #16]
 8002ede:	f000 f841 	bl	8002f64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e001      	b.n	8002eec <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002eec:	697b      	ldr	r3, [r7, #20]
	}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002ef6:	b590      	push	{r4, r7, lr}
 8002ef8:	b087      	sub	sp, #28
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	60fb      	str	r3, [r7, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	685c      	ldr	r4, [r3, #4]
 8002f24:	f001 fb6a 	bl	80045fc <xTaskGetCurrentTaskHandle>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	429c      	cmp	r4, r3
 8002f2c:	d107      	bne.n	8002f3e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e00c      	b.n	8002f58 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	6938      	ldr	r0, [r7, #16]
 8002f42:	f000 fa85 	bl	8003450 <xQueueSemaphoreTake>
 8002f46:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002f58:	697b      	ldr	r3, [r7, #20]
	}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
	...

08002f64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	; 0x38
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f72:	2300      	movs	r3, #0
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <xQueueGenericSend+0x32>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <xQueueGenericSend+0x40>
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <xQueueGenericSend+0x44>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <xQueueGenericSend+0x46>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <xQueueGenericSend+0x60>
	__asm volatile
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fc0:	bf00      	nop
 8002fc2:	e7fe      	b.n	8002fc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d103      	bne.n	8002fd2 <xQueueGenericSend+0x6e>
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <xQueueGenericSend+0x72>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <xQueueGenericSend+0x74>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	623b      	str	r3, [r7, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ff2:	f001 fb11 	bl	8004618 <xTaskGetSchedulerState>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <xQueueGenericSend+0x9e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <xQueueGenericSend+0xa2>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <xQueueGenericSend+0xa4>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <xQueueGenericSend+0xbe>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	61fb      	str	r3, [r7, #28]
}
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003022:	f002 f8e3 	bl	80051ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <xQueueGenericSend+0xd4>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d129      	bne.n	800308c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800303e:	f000 fb2a 	bl	8003696 <prvCopyDataToQueue>
 8003042:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	4618      	mov	r0, r3
 8003052:	f001 f90d 	bl	8004270 <xTaskRemoveFromEventList>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <xQueueGenericSend+0x1f8>)
 800305e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	e00a      	b.n	8003084 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <xQueueGenericSend+0x1f8>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003084:	f002 f8e2 	bl	800524c <vPortExitCritical>
				return pdPASS;
 8003088:	2301      	movs	r3, #1
 800308a:	e063      	b.n	8003154 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003092:	f002 f8db 	bl	800524c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003096:	2300      	movs	r3, #0
 8003098:	e05c      	b.n	8003154 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 f947 	bl	8004338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ae:	f002 f8cd 	bl	800524c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030b2:	f000 feb1 	bl	8003e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030b6:	f002 f899 	bl	80051ec <vPortEnterCritical>
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d103      	bne.n	80030d0 <xQueueGenericSend+0x16c>
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d103      	bne.n	80030e6 <xQueueGenericSend+0x182>
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e6:	f002 f8b1 	bl	800524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ea:	1d3a      	adds	r2, r7, #4
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f936 	bl	8004364 <xTaskCheckForTimeOut>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d124      	bne.n	8003148 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003100:	f000 fbc1 	bl	8003886 <prvIsQueueFull>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d018      	beq.n	800313c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	3310      	adds	r3, #16
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f001 f85c 	bl	80041d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800311a:	f000 fb4c 	bl	80037b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800311e:	f000 fe89 	bl	8003e34 <xTaskResumeAll>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f af7c 	bne.w	8003022 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <xQueueGenericSend+0x1f8>)
 800312c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	e772      	b.n	8003022 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800313c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800313e:	f000 fb3a 	bl	80037b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003142:	f000 fe77 	bl	8003e34 <xTaskResumeAll>
 8003146:	e76c      	b.n	8003022 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800314a:	f000 fb34 	bl	80037b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800314e:	f000 fe71 	bl	8003e34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003152:	2300      	movs	r3, #0
		}
	}
}
 8003154:	4618      	mov	r0, r3
 8003156:	3738      	adds	r7, #56	; 0x38
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08e      	sub	sp, #56	; 0x38
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
}
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <xQueueGenericSendFromISR+0x3c>
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <xQueueGenericSendFromISR+0x40>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <xQueueGenericSendFromISR+0x42>
 80031a0:	2300      	movs	r3, #0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	623b      	str	r3, [r7, #32]
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d103      	bne.n	80031ca <xQueueGenericSendFromISR+0x6a>
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <xQueueGenericSendFromISR+0x6e>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueGenericSendFromISR+0x70>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	61fb      	str	r3, [r7, #28]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ea:	f002 f8c1 	bl	8005370 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031ee:	f3ef 8211 	mrs	r2, BASEPRI
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	61ba      	str	r2, [r7, #24]
 8003204:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003206:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <xQueueGenericSendFromISR+0xbc>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d12c      	bne.n	8003276 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800322c:	f000 fa33 	bl	8003696 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003230:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d112      	bne.n	8003260 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	3324      	adds	r3, #36	; 0x24
 8003246:	4618      	mov	r0, r3
 8003248:	f001 f812 	bl	8004270 <xTaskRemoveFromEventList>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00e      	beq.n	8003270 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e007      	b.n	8003270 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003264:	3301      	adds	r3, #1
 8003266:	b2db      	uxtb	r3, r3
 8003268:	b25a      	sxtb	r2, r3
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003270:	2301      	movs	r3, #1
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003274:	e001      	b.n	800327a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003284:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003288:	4618      	mov	r0, r3
 800328a:	3738      	adds	r7, #56	; 0x38
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08c      	sub	sp, #48	; 0x30
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <xQueueReceive+0x30>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	623b      	str	r3, [r7, #32]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <xQueueReceive+0x3e>
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <xQueueReceive+0x42>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueReceive+0x44>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xQueueReceive+0x5e>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	61fb      	str	r3, [r7, #28]
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ee:	f001 f993 	bl	8004618 <xTaskGetSchedulerState>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <xQueueReceive+0x6e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <xQueueReceive+0x72>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <xQueueReceive+0x74>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <xQueueReceive+0x8e>
	__asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	61bb      	str	r3, [r7, #24]
}
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800331e:	f001 ff65 	bl	80051ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01f      	beq.n	800336e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003332:	f000 fa1a 	bl	800376a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00f      	beq.n	8003366 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	3310      	adds	r3, #16
 800334a:	4618      	mov	r0, r3
 800334c:	f000 ff90 	bl	8004270 <xTaskRemoveFromEventList>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <xQueueReceive+0x1bc>)
 8003358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003366:	f001 ff71 	bl	800524c <vPortExitCritical>
				return pdPASS;
 800336a:	2301      	movs	r3, #1
 800336c:	e069      	b.n	8003442 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003374:	f001 ff6a 	bl	800524c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003378:	2300      	movs	r3, #0
 800337a:	e062      	b.n	8003442 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003382:	f107 0310 	add.w	r3, r7, #16
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ffd6 	bl	8004338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003390:	f001 ff5c 	bl	800524c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003394:	f000 fd40 	bl	8003e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003398:	f001 ff28 	bl	80051ec <vPortEnterCritical>
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d103      	bne.n	80033b2 <xQueueReceive+0x122>
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d103      	bne.n	80033c8 <xQueueReceive+0x138>
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033c8:	f001 ff40 	bl	800524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033cc:	1d3a      	adds	r2, r7, #4
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 ffc5 	bl	8004364 <xTaskCheckForTimeOut>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d123      	bne.n	8003428 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033e2:	f000 fa3a 	bl	800385a <prvIsQueueEmpty>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	3324      	adds	r3, #36	; 0x24
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 feeb 	bl	80041d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033fc:	f000 f9db 	bl	80037b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003400:	f000 fd18 	bl	8003e34 <xTaskResumeAll>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d189      	bne.n	800331e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <xQueueReceive+0x1bc>)
 800340c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	e780      	b.n	800331e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800341c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341e:	f000 f9ca 	bl	80037b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003422:	f000 fd07 	bl	8003e34 <xTaskResumeAll>
 8003426:	e77a      	b.n	800331e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342a:	f000 f9c4 	bl	80037b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800342e:	f000 fd01 	bl	8003e34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003434:	f000 fa11 	bl	800385a <prvIsQueueEmpty>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	f43f af6f 	beq.w	800331e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003442:	4618      	mov	r0, r3
 8003444:	3730      	adds	r7, #48	; 0x30
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000ed04 	.word	0xe000ed04

08003450 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08e      	sub	sp, #56	; 0x38
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	623b      	str	r3, [r7, #32]
}
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	61fb      	str	r3, [r7, #28]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a0:	f001 f8ba 	bl	8004618 <xTaskGetSchedulerState>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <xQueueSemaphoreTake+0x60>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <xQueueSemaphoreTake+0x64>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <xQueueSemaphoreTake+0x66>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	61bb      	str	r3, [r7, #24]
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d0:	f001 fe8c 	bl	80051ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d024      	beq.n	800352a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80034f0:	f001 fa12 	bl	8004918 <pvTaskIncrementMutexHeldCount>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00f      	beq.n	8003522 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	3310      	adds	r3, #16
 8003506:	4618      	mov	r0, r3
 8003508:	f000 feb2 	bl	8004270 <xTaskRemoveFromEventList>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003512:	4b54      	ldr	r3, [pc, #336]	; (8003664 <xQueueSemaphoreTake+0x214>)
 8003514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003522:	f001 fe93 	bl	800524c <vPortExitCritical>
				return pdPASS;
 8003526:	2301      	movs	r3, #1
 8003528:	e097      	b.n	800365a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	617b      	str	r3, [r7, #20]
}
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800354c:	f001 fe7e 	bl	800524c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003550:	2300      	movs	r3, #0
 8003552:	e082      	b.n	800365a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	4618      	mov	r0, r3
 8003560:	f000 feea 	bl	8004338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003568:	f001 fe70 	bl	800524c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800356c:	f000 fc54 	bl	8003e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003570:	f001 fe3c 	bl	80051ec <vPortEnterCritical>
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357a:	b25b      	sxtb	r3, r3
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d103      	bne.n	800358a <xQueueSemaphoreTake+0x13a>
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003590:	b25b      	sxtb	r3, r3
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d103      	bne.n	80035a0 <xQueueSemaphoreTake+0x150>
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a0:	f001 fe54 	bl	800524c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035a4:	463a      	mov	r2, r7
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fed9 	bl	8004364 <xTaskCheckForTimeOut>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d132      	bne.n	800361e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ba:	f000 f94e 	bl	800385a <prvIsQueueEmpty>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d026      	beq.n	8003612 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80035cc:	f001 fe0e 	bl	80051ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 f83d 	bl	8004654 <xTaskPriorityInherit>
 80035da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80035dc:	f001 fe36 	bl	800524c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	3324      	adds	r3, #36	; 0x24
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fdf1 	bl	80041d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f0:	f000 f8e1 	bl	80037b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035f4:	f000 fc1e 	bl	8003e34 <xTaskResumeAll>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f af68 	bne.w	80034d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <xQueueSemaphoreTake+0x214>)
 8003602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	e75e      	b.n	80034d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003614:	f000 f8cf 	bl	80037b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003618:	f000 fc0c 	bl	8003e34 <xTaskResumeAll>
 800361c:	e758      	b.n	80034d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800361e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003620:	f000 f8c9 	bl	80037b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003624:	f000 fc06 	bl	8003e34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800362a:	f000 f916 	bl	800385a <prvIsQueueEmpty>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	f43f af4d 	beq.w	80034d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800363c:	f001 fdd6 	bl	80051ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003642:	f000 f811 	bl	8003668 <prvGetDisinheritPriorityAfterTimeout>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364e:	4618      	mov	r0, r3
 8003650:	f001 f8dc 	bl	800480c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003654:	f001 fdfa 	bl	800524c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003658:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800365a:	4618      	mov	r0, r3
 800365c:	3738      	adds	r7, #56	; 0x38
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e001      	b.n	800368a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800368a:	68fb      	ldr	r3, [r7, #12]
	}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr

08003696 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d14d      	bne.n	8003758 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 f835 	bl	8004730 <xTaskPriorityDisinherit>
 80036c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e043      	b.n	8003758 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6898      	ldr	r0, [r3, #8]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	461a      	mov	r2, r3
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	f002 fa44 	bl	8005b6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d32b      	bcc.n	8003758 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	e026      	b.n	8003758 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68d8      	ldr	r0, [r3, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	461a      	mov	r2, r3
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	f002 fa2a 	bl	8005b6e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	425b      	negs	r3, r3
 8003724:	441a      	add	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d207      	bcs.n	8003746 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	425b      	negs	r3, r3
 8003740:	441a      	add	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d105      	bne.n	8003758 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3b01      	subs	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003760:	697b      	ldr	r3, [r7, #20]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d018      	beq.n	80037ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	441a      	add	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d303      	bcc.n	800379e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68d9      	ldr	r1, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	461a      	mov	r2, r3
 80037a8:	6838      	ldr	r0, [r7, #0]
 80037aa:	f002 f9e0 	bl	8005b6e <memcpy>
	}
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037be:	f001 fd15 	bl	80051ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ca:	e011      	b.n	80037f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d012      	beq.n	80037fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3324      	adds	r3, #36	; 0x24
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fd49 	bl	8004270 <xTaskRemoveFromEventList>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037e4:	f000 fe20 	bl	8004428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	dce9      	bgt.n	80037cc <prvUnlockQueue+0x16>
 80037f8:	e000      	b.n	80037fc <prvUnlockQueue+0x46>
					break;
 80037fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003804:	f001 fd22 	bl	800524c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003808:	f001 fcf0 	bl	80051ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003812:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003814:	e011      	b.n	800383a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3310      	adds	r3, #16
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fd24 	bl	8004270 <xTaskRemoveFromEventList>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800382e:	f000 fdfb 	bl	8004428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003832:	7bbb      	ldrb	r3, [r7, #14]
 8003834:	3b01      	subs	r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800383a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800383e:	2b00      	cmp	r3, #0
 8003840:	dce9      	bgt.n	8003816 <prvUnlockQueue+0x60>
 8003842:	e000      	b.n	8003846 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003844:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800384e:	f001 fcfd 	bl	800524c <vPortExitCritical>
}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003862:	f001 fcc3 	bl	80051ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800386e:	2301      	movs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e001      	b.n	8003878 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003878:	f001 fce8 	bl	800524c <vPortExitCritical>

	return xReturn;
 800387c:	68fb      	ldr	r3, [r7, #12]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800388e:	f001 fcad 	bl	80051ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	429a      	cmp	r2, r3
 800389c:	d102      	bne.n	80038a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e001      	b.n	80038a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038a8:	f001 fcd0 	bl	800524c <vPortExitCritical>

	return xReturn;
 80038ac:	68fb      	ldr	r3, [r7, #12]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e014      	b.n	80038f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <vQueueAddToRegistry+0x4c>)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038d4:	490b      	ldr	r1, [pc, #44]	; (8003904 <vQueueAddToRegistry+0x4c>)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <vQueueAddToRegistry+0x4c>)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038ea:	e006      	b.n	80038fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	d9e7      	bls.n	80038c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	200008cc 	.word	0x200008cc

08003908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003918:	f001 fc68 	bl	80051ec <vPortEnterCritical>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003922:	b25b      	sxtb	r3, r3
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d103      	bne.n	8003932 <vQueueWaitForMessageRestricted+0x2a>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003938:	b25b      	sxtb	r3, r3
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d103      	bne.n	8003948 <vQueueWaitForMessageRestricted+0x40>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003948:	f001 fc80 	bl	800524c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fc5b 	bl	8004218 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff27 	bl	80037b6 <prvUnlockQueue>
	}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af04      	add	r7, sp, #16
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	61fb      	str	r3, [r7, #28]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039b6:	23a8      	movs	r3, #168	; 0xa8
 80039b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2ba8      	cmp	r3, #168	; 0xa8
 80039be:	d00a      	beq.n	80039d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61bb      	str	r3, [r7, #24]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01e      	beq.n	8003a1a <xTaskCreateStatic+0xaa>
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01b      	beq.n	8003a1a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f4:	2300      	movs	r3, #0
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f851 	bl	8003ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a14:	f000 f8ec 	bl	8003bf0 <prvAddNewTaskToReadyList>
 8003a18:	e001      	b.n	8003a1e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a1e:	697b      	ldr	r3, [r7, #20]
	}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af04      	add	r7, sp, #16
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fcd5 	bl	80053ec <pvPortMalloc>
 8003a42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a4a:	20a8      	movs	r0, #168	; 0xa8
 8003a4c:	f001 fcce 	bl	80053ec <pvPortMalloc>
 8003a50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5e:	e005      	b.n	8003a6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a60:	6978      	ldr	r0, [r7, #20]
 8003a62:	f001 fd87 	bl	8005574 <vPortFree>
 8003a66:	e001      	b.n	8003a6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d017      	beq.n	8003aa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9303      	str	r3, [sp, #12]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9302      	str	r3, [sp, #8]
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f80f 	bl	8003ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a96:	69f8      	ldr	r0, [r7, #28]
 8003a98:	f000 f8aa 	bl	8003bf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e002      	b.n	8003aa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	461a      	mov	r2, r3
 8003acc:	21a5      	movs	r1, #165	; 0xa5
 8003ace:	f001 ff7c 	bl	80059ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003adc:	3b01      	subs	r3, #1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f023 0307 	bic.w	r3, r3, #7
 8003aea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	617b      	str	r3, [r7, #20]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e012      	b.n	8003b38 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	7819      	ldrb	r1, [r3, #0]
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3334      	adds	r3, #52	; 0x34
 8003b22:	460a      	mov	r2, r1
 8003b24:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3301      	adds	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	d9e9      	bls.n	8003b12 <prvInitialiseNewTask+0x5e>
 8003b3e:	e000      	b.n	8003b42 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003b40:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	2b37      	cmp	r3, #55	; 0x37
 8003b4e:	d901      	bls.n	8003b54 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b50:	2337      	movs	r3, #55	; 0x37
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2200      	movs	r2, #0
 8003b64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe ff71 	bl	8002a52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	3318      	adds	r3, #24
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe ff6c 	bl	8002a52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	3354      	adds	r3, #84	; 0x54
 8003ba4:	224c      	movs	r2, #76	; 0x4c
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 ff0e 	bl	80059ca <memset>
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <prvInitialiseNewTask+0x130>)
 8003bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <prvInitialiseNewTask+0x134>)
 8003bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <prvInitialiseNewTask+0x138>)
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	69b8      	ldr	r0, [r7, #24]
 8003bc6:	f001 fa21 	bl	800500c <pxPortInitialiseStack>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bdc:	bf00      	nop
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20001b58 	.word	0x20001b58
 8003be8:	20001bc0 	.word	0x20001bc0
 8003bec:	20001c28 	.word	0x20001c28

08003bf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bf8:	f001 faf8 	bl	80051ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <prvAddNewTaskToReadyList+0xc4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <prvAddNewTaskToReadyList+0xc4>)
 8003c04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c06:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <prvAddNewTaskToReadyList+0xc4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d110      	bne.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c1c:	f000 fc28 	bl	8004470 <prvInitialiseTaskLists>
 8003c20:	e00d      	b.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <prvAddNewTaskToReadyList+0xcc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d802      	bhi.n	8003c3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <prvAddNewTaskToReadyList+0xd0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <prvAddNewTaskToReadyList+0xd0>)
 8003c46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <prvAddNewTaskToReadyList+0xd0>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <prvAddNewTaskToReadyList+0xd4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d903      	bls.n	8003c64 <prvAddNewTaskToReadyList+0x74>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <prvAddNewTaskToReadyList+0xd4>)
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <prvAddNewTaskToReadyList+0xd8>)
 8003c72:	441a      	add	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7fe fef5 	bl	8002a6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c80:	f001 fae4 	bl	800524c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c84:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <prvAddNewTaskToReadyList+0xcc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <prvAddNewTaskToReadyList+0xc8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d207      	bcs.n	8003caa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <prvAddNewTaskToReadyList+0xdc>)
 8003c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000de0 	.word	0x20000de0
 8003cb8:	2000090c 	.word	0x2000090c
 8003cbc:	20000dec 	.word	0x20000dec
 8003cc0:	20000dfc 	.word	0x20000dfc
 8003cc4:	20000de8 	.word	0x20000de8
 8003cc8:	20000910 	.word	0x20000910
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d017      	beq.n	8003d12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <vTaskDelay+0x60>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <vTaskDelay+0x30>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60bb      	str	r3, [r7, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d00:	f000 f88a 	bl	8003e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d04:	2100      	movs	r1, #0
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fe1a 	bl	8004940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d0c:	f000 f892 	bl	8003e34 <xTaskResumeAll>
 8003d10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d107      	bne.n	8003d28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <vTaskDelay+0x64>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000e08 	.word	0x20000e08
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d46:	463a      	mov	r2, r7
 8003d48:	1d39      	adds	r1, r7, #4
 8003d4a:	f107 0308 	add.w	r3, r7, #8
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fe2e 	bl	80029b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	9202      	str	r2, [sp, #8]
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2300      	movs	r3, #0
 8003d64:	460a      	mov	r2, r1
 8003d66:	4924      	ldr	r1, [pc, #144]	; (8003df8 <vTaskStartScheduler+0xc0>)
 8003d68:	4824      	ldr	r0, [pc, #144]	; (8003dfc <vTaskStartScheduler+0xc4>)
 8003d6a:	f7ff fe01 	bl	8003970 <xTaskCreateStatic>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <vTaskStartScheduler+0xc8>)
 8003d72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <vTaskStartScheduler+0xc8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e001      	b.n	8003d86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d102      	bne.n	8003d92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d8c:	f000 fe2c 	bl	80049e8 <xTimerCreateTimerTask>
 8003d90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d11b      	bne.n	8003dd0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	613b      	str	r3, [r7, #16]
}
 8003daa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <vTaskStartScheduler+0xcc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3354      	adds	r3, #84	; 0x54
 8003db2:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <vTaskStartScheduler+0xd0>)
 8003db4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <vTaskStartScheduler+0xd4>)
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <vTaskStartScheduler+0xd8>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <vTaskStartScheduler+0xdc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dca:	f001 f99d 	bl	8005108 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dce:	e00e      	b.n	8003dee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d10a      	bne.n	8003dee <vTaskStartScheduler+0xb6>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60fb      	str	r3, [r7, #12]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <vTaskStartScheduler+0xb4>
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	0800674c 	.word	0x0800674c
 8003dfc:	08004441 	.word	0x08004441
 8003e00:	20000e04 	.word	0x20000e04
 8003e04:	2000090c 	.word	0x2000090c
 8003e08:	20000068 	.word	0x20000068
 8003e0c:	20000e00 	.word	0x20000e00
 8003e10:	20000dec 	.word	0x20000dec
 8003e14:	20000de4 	.word	0x20000de4

08003e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <vTaskSuspendAll+0x18>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <vTaskSuspendAll+0x18>)
 8003e24:	6013      	str	r3, [r2, #0]
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000e08 	.word	0x20000e08

08003e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e42:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	603b      	str	r3, [r7, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e60:	f001 f9c4 	bl	80051ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e64:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4a38      	ldr	r2, [pc, #224]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <xTaskResumeAll+0x118>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d162      	bne.n	8003f3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <xTaskResumeAll+0x11c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d05e      	beq.n	8003f3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e7e:	e02f      	b.n	8003ee0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e80:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <xTaskResumeAll+0x120>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fe47 	bl	8002b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fe42 	bl	8002b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <xTaskResumeAll+0x124>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d903      	bls.n	8003eb0 <xTaskResumeAll+0x7c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <xTaskResumeAll+0x124>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <xTaskResumeAll+0x128>)
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7fe fdcf 	bl	8002a6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <xTaskResumeAll+0x12c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <xTaskResumeAll+0x130>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <xTaskResumeAll+0x120>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1cb      	bne.n	8003e80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eee:	f000 fb61 	bl	80045b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <xTaskResumeAll+0x134>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d010      	beq.n	8003f20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003efe:	f000 f845 	bl	8003f8c <xTaskIncrementTick>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f08:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <xTaskResumeAll+0x130>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f1      	bne.n	8003efe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <xTaskResumeAll+0x134>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <xTaskResumeAll+0x130>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <xTaskResumeAll+0x138>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f3c:	f001 f986 	bl	800524c <vPortExitCritical>

	return xAlreadyYielded;
 8003f40:	68bb      	ldr	r3, [r7, #8]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000e08 	.word	0x20000e08
 8003f50:	20000de0 	.word	0x20000de0
 8003f54:	20000da0 	.word	0x20000da0
 8003f58:	20000de8 	.word	0x20000de8
 8003f5c:	20000910 	.word	0x20000910
 8003f60:	2000090c 	.word	0x2000090c
 8003f64:	20000df4 	.word	0x20000df4
 8003f68:	20000df0 	.word	0x20000df0
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <xTaskGetTickCount+0x18>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f7c:	687b      	ldr	r3, [r7, #4]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	20000de4 	.word	0x20000de4

08003f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f96:	4b51      	ldr	r3, [pc, #324]	; (80040dc <xTaskIncrementTick+0x150>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 808e 	bne.w	80040bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fa0:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <xTaskIncrementTick+0x154>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fa8:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <xTaskIncrementTick+0x154>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d120      	bne.n	8003ff6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <xTaskIncrementTick+0x158>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	603b      	str	r3, [r7, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	e7fe      	b.n	8003fd2 <xTaskIncrementTick+0x46>
 8003fd4:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <xTaskIncrementTick+0x158>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <xTaskIncrementTick+0x15c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <xTaskIncrementTick+0x158>)
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4a41      	ldr	r2, [pc, #260]	; (80040e8 <xTaskIncrementTick+0x15c>)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <xTaskIncrementTick+0x160>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <xTaskIncrementTick+0x160>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	f000 fadf 	bl	80045b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <xTaskIncrementTick+0x164>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d34e      	bcc.n	800409e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004000:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <xTaskIncrementTick+0x158>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xTaskIncrementTick+0x82>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <xTaskIncrementTick+0x84>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <xTaskIncrementTick+0x164>)
 8004016:	f04f 32ff 	mov.w	r2, #4294967295
 800401a:	601a      	str	r2, [r3, #0]
					break;
 800401c:	e03f      	b.n	800409e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <xTaskIncrementTick+0x158>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	d203      	bcs.n	800403e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004036:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <xTaskIncrementTick+0x164>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6013      	str	r3, [r2, #0]
						break;
 800403c:	e02f      	b.n	800409e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3304      	adds	r3, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fd6c 	bl	8002b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	3318      	adds	r3, #24
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe fd63 	bl	8002b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <xTaskIncrementTick+0x168>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d903      	bls.n	800406e <xTaskIncrementTick+0xe2>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <xTaskIncrementTick+0x168>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <xTaskIncrementTick+0x16c>)
 800407c:	441a      	add	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe fcf0 	bl	8002a6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <xTaskIncrementTick+0x170>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	429a      	cmp	r2, r3
 8004096:	d3b3      	bcc.n	8004000 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004098:	2301      	movs	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	e7b0      	b.n	8004000 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <xTaskIncrementTick+0x170>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4914      	ldr	r1, [pc, #80]	; (80040f8 <xTaskIncrementTick+0x16c>)
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d907      	bls.n	80040c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e004      	b.n	80040c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <xTaskIncrementTick+0x174>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <xTaskIncrementTick+0x174>)
 80040c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <xTaskIncrementTick+0x178>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000e08 	.word	0x20000e08
 80040e0:	20000de4 	.word	0x20000de4
 80040e4:	20000d98 	.word	0x20000d98
 80040e8:	20000d9c 	.word	0x20000d9c
 80040ec:	20000df8 	.word	0x20000df8
 80040f0:	20000e00 	.word	0x20000e00
 80040f4:	20000de8 	.word	0x20000de8
 80040f8:	20000910 	.word	0x20000910
 80040fc:	2000090c 	.word	0x2000090c
 8004100:	20000df0 	.word	0x20000df0
 8004104:	20000df4 	.word	0x20000df4

08004108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <vTaskSwitchContext+0xb0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004116:	4b29      	ldr	r3, [pc, #164]	; (80041bc <vTaskSwitchContext+0xb4>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800411c:	e046      	b.n	80041ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800411e:	4b27      	ldr	r3, [pc, #156]	; (80041bc <vTaskSwitchContext+0xb4>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004124:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <vTaskSwitchContext+0xb8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e010      	b.n	800414e <vTaskSwitchContext+0x46>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <vTaskSwitchContext+0x40>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	607b      	str	r3, [r7, #4]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <vTaskSwitchContext+0x3e>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	491d      	ldr	r1, [pc, #116]	; (80041c4 <vTaskSwitchContext+0xbc>)
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0e4      	beq.n	800412c <vTaskSwitchContext+0x24>
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <vTaskSwitchContext+0xbc>)
 800416e:	4413      	add	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	605a      	str	r2, [r3, #4]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3308      	adds	r3, #8
 8004184:	429a      	cmp	r2, r3
 8004186:	d104      	bne.n	8004192 <vTaskSwitchContext+0x8a>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <vTaskSwitchContext+0xc0>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <vTaskSwitchContext+0xb8>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <vTaskSwitchContext+0xc0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3354      	adds	r3, #84	; 0x54
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <vTaskSwitchContext+0xc4>)
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000e08 	.word	0x20000e08
 80041bc:	20000df4 	.word	0x20000df4
 80041c0:	20000de8 	.word	0x20000de8
 80041c4:	20000910 	.word	0x20000910
 80041c8:	2000090c 	.word	0x2000090c
 80041cc:	20000068 	.word	0x20000068

080041d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <vTaskPlaceOnEventList+0x44>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fe fc56 	bl	8002ab0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004204:	2101      	movs	r1, #1
 8004206:	6838      	ldr	r0, [r7, #0]
 8004208:	f000 fb9a 	bl	8004940 <prvAddCurrentTaskToDelayedList>
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2000090c 	.word	0x2000090c

08004218 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	617b      	str	r3, [r7, #20]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <vTaskPlaceOnEventListRestricted+0x54>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3318      	adds	r3, #24
 8004246:	4619      	mov	r1, r3
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7fe fc0e 	bl	8002a6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	68b8      	ldr	r0, [r7, #8]
 800425e:	f000 fb6f 	bl	8004940 <prvAddCurrentTaskToDelayedList>
	}
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000090c 	.word	0x2000090c

08004270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60fb      	str	r3, [r7, #12]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	3318      	adds	r3, #24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe fc3d 	bl	8002b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fc34 	bl	8002b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <xTaskRemoveFromEventList+0xb4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d903      	bls.n	80042cc <xTaskRemoveFromEventList+0x5c>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <xTaskRemoveFromEventList+0xb4>)
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4a13      	ldr	r2, [pc, #76]	; (8004328 <xTaskRemoveFromEventList+0xb8>)
 80042da:	441a      	add	r2, r3
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f7fe fbc1 	bl	8002a6a <vListInsertEnd>
 80042e8:	e005      	b.n	80042f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	3318      	adds	r3, #24
 80042ee:	4619      	mov	r1, r3
 80042f0:	480e      	ldr	r0, [pc, #56]	; (800432c <xTaskRemoveFromEventList+0xbc>)
 80042f2:	f7fe fbba 	bl	8002a6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <xTaskRemoveFromEventList+0xc0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	429a      	cmp	r2, r3
 8004302:	d905      	bls.n	8004310 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <xTaskRemoveFromEventList+0xc4>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e001      	b.n	8004314 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004314:	697b      	ldr	r3, [r7, #20]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000e08 	.word	0x20000e08
 8004324:	20000de8 	.word	0x20000de8
 8004328:	20000910 	.word	0x20000910
 800432c:	20000da0 	.word	0x20000da0
 8004330:	2000090c 	.word	0x2000090c
 8004334:	20000df4 	.word	0x20000df4

08004338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <vTaskInternalSetTimeOutState+0x24>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <vTaskInternalSetTimeOutState+0x28>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20000df8 	.word	0x20000df8
 8004360:	20000de4 	.word	0x20000de4

08004364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	613b      	str	r3, [r7, #16]
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043a6:	f000 ff21 	bl	80051ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <xTaskCheckForTimeOut+0xbc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d102      	bne.n	80043ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e023      	b.n	8004412 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <xTaskCheckForTimeOut+0xc0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d007      	beq.n	80043e6 <xTaskCheckForTimeOut+0x82>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	e015      	b.n	8004412 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d20b      	bcs.n	8004408 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ff9b 	bl	8004338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e004      	b.n	8004412 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004412:	f000 ff1b 	bl	800524c <vPortExitCritical>

	return xReturn;
 8004416:	69fb      	ldr	r3, [r7, #28]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000de4 	.word	0x20000de4
 8004424:	20000df8 	.word	0x20000df8

08004428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <vTaskMissedYield+0x14>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
}
 8004432:	bf00      	nop
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000df4 	.word	0x20000df4

08004440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004448:	f000 f852 	bl	80044f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <prvIdleTask+0x28>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d9f9      	bls.n	8004448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <prvIdleTask+0x2c>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004464:	e7f0      	b.n	8004448 <prvIdleTask+0x8>
 8004466:	bf00      	nop
 8004468:	20000910 	.word	0x20000910
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e00c      	b.n	8004496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <prvInitialiseTaskLists+0x60>)
 8004488:	4413      	add	r3, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fac2 	bl	8002a14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3301      	adds	r3, #1
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b37      	cmp	r3, #55	; 0x37
 800449a:	d9ef      	bls.n	800447c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800449c:	480d      	ldr	r0, [pc, #52]	; (80044d4 <prvInitialiseTaskLists+0x64>)
 800449e:	f7fe fab9 	bl	8002a14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044a2:	480d      	ldr	r0, [pc, #52]	; (80044d8 <prvInitialiseTaskLists+0x68>)
 80044a4:	f7fe fab6 	bl	8002a14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a8:	480c      	ldr	r0, [pc, #48]	; (80044dc <prvInitialiseTaskLists+0x6c>)
 80044aa:	f7fe fab3 	bl	8002a14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ae:	480c      	ldr	r0, [pc, #48]	; (80044e0 <prvInitialiseTaskLists+0x70>)
 80044b0:	f7fe fab0 	bl	8002a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044b4:	480b      	ldr	r0, [pc, #44]	; (80044e4 <prvInitialiseTaskLists+0x74>)
 80044b6:	f7fe faad 	bl	8002a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <prvInitialiseTaskLists+0x78>)
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <prvInitialiseTaskLists+0x64>)
 80044be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <prvInitialiseTaskLists+0x7c>)
 80044c2:	4a05      	ldr	r2, [pc, #20]	; (80044d8 <prvInitialiseTaskLists+0x68>)
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000910 	.word	0x20000910
 80044d4:	20000d70 	.word	0x20000d70
 80044d8:	20000d84 	.word	0x20000d84
 80044dc:	20000da0 	.word	0x20000da0
 80044e0:	20000db4 	.word	0x20000db4
 80044e4:	20000dcc 	.word	0x20000dcc
 80044e8:	20000d98 	.word	0x20000d98
 80044ec:	20000d9c 	.word	0x20000d9c

080044f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044f6:	e019      	b.n	800452c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044f8:	f000 fe78 	bl	80051ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <prvCheckTasksWaitingTermination+0x50>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fb09 	bl	8002b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <prvCheckTasksWaitingTermination+0x54>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3b01      	subs	r3, #1
 8004514:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <prvCheckTasksWaitingTermination+0x54>)
 8004516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <prvCheckTasksWaitingTermination+0x58>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3b01      	subs	r3, #1
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <prvCheckTasksWaitingTermination+0x58>)
 8004520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004522:	f000 fe93 	bl	800524c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f810 	bl	800454c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <prvCheckTasksWaitingTermination+0x58>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e1      	bne.n	80044f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000db4 	.word	0x20000db4
 8004544:	20000de0 	.word	0x20000de0
 8004548:	20000dc8 	.word	0x20000dc8

0800454c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3354      	adds	r3, #84	; 0x54
 8004558:	4618      	mov	r0, r3
 800455a:	f001 fa4f 	bl	80059fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004564:	2b00      	cmp	r3, #0
 8004566:	d108      	bne.n	800457a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f801 	bl	8005574 <vPortFree>
				vPortFree( pxTCB );
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fffe 	bl	8005574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004578:	e018      	b.n	80045ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004580:	2b01      	cmp	r3, #1
 8004582:	d103      	bne.n	800458c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fff5 	bl	8005574 <vPortFree>
	}
 800458a:	e00f      	b.n	80045ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004592:	2b02      	cmp	r3, #2
 8004594:	d00a      	beq.n	80045ac <prvDeleteTCB+0x60>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60fb      	str	r3, [r7, #12]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <prvDeleteTCB+0x5e>
	}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ba:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <prvResetNextTaskUnblockTime+0x40>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <prvResetNextTaskUnblockTime+0x14>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <prvResetNextTaskUnblockTime+0x16>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <prvResetNextTaskUnblockTime+0x44>)
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d6:	e008      	b.n	80045ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <prvResetNextTaskUnblockTime+0x40>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <prvResetNextTaskUnblockTime+0x44>)
 80045e8:	6013      	str	r3, [r2, #0]
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	20000d98 	.word	0x20000d98
 80045f8:	20000e00 	.word	0x20000e00

080045fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <xTaskGetCurrentTaskHandle+0x18>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004608:	687b      	ldr	r3, [r7, #4]
	}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	2000090c 	.word	0x2000090c

08004618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <xTaskGetSchedulerState+0x34>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004626:	2301      	movs	r3, #1
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	e008      	b.n	800463e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <xTaskGetSchedulerState+0x38>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004634:	2302      	movs	r3, #2
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	e001      	b.n	800463e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800463e:	687b      	ldr	r3, [r7, #4]
	}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000dec 	.word	0x20000dec
 8004650:	20000e08 	.word	0x20000e08

08004654 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d056      	beq.n	8004718 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <xTaskPriorityInherit+0xd0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	429a      	cmp	r2, r3
 8004676:	d246      	bcs.n	8004706 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	db06      	blt.n	800468e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <xTaskPriorityInherit+0xd0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6959      	ldr	r1, [r3, #20]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a22      	ldr	r2, [pc, #136]	; (8004728 <xTaskPriorityInherit+0xd4>)
 80046a0:	4413      	add	r3, r2
 80046a2:	4299      	cmp	r1, r3
 80046a4:	d101      	bne.n	80046aa <xTaskPriorityInherit+0x56>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xTaskPriorityInherit+0x58>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d022      	beq.n	80046f6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fa33 	bl	8002b20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046ba:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <xTaskPriorityInherit+0xd0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <xTaskPriorityInherit+0xd8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d903      	bls.n	80046d8 <xTaskPriorityInherit+0x84>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <xTaskPriorityInherit+0xd8>)
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4a10      	ldr	r2, [pc, #64]	; (8004728 <xTaskPriorityInherit+0xd4>)
 80046e6:	441a      	add	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f7fe f9bb 	bl	8002a6a <vListInsertEnd>
 80046f4:	e004      	b.n	8004700 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <xTaskPriorityInherit+0xd0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e008      	b.n	8004718 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <xTaskPriorityInherit+0xd0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	429a      	cmp	r2, r3
 8004712:	d201      	bcs.n	8004718 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004718:	68fb      	ldr	r3, [r7, #12]
	}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	2000090c 	.word	0x2000090c
 8004728:	20000910 	.word	0x20000910
 800472c:	20000de8 	.word	0x20000de8

08004730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d056      	beq.n	80047f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004746:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <xTaskPriorityDisinherit+0xd0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d00a      	beq.n	8004766 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	60bb      	str	r3, [r7, #8]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	429a      	cmp	r2, r3
 8004798:	d02c      	beq.n	80047f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d128      	bne.n	80047f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe f9ba 	bl	8002b20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <xTaskPriorityDisinherit+0xd4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d903      	bls.n	80047d4 <xTaskPriorityDisinherit+0xa4>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <xTaskPriorityDisinherit+0xd4>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4a09      	ldr	r2, [pc, #36]	; (8004808 <xTaskPriorityDisinherit+0xd8>)
 80047e2:	441a      	add	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fe f93d 	bl	8002a6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047f4:	697b      	ldr	r3, [r7, #20]
	}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000090c 	.word	0x2000090c
 8004804:	20000de8 	.word	0x20000de8
 8004808:	20000910 	.word	0x20000910

0800480c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d06f      	beq.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d902      	bls.n	8004852 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	e002      	b.n	8004858 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	429a      	cmp	r2, r3
 8004860:	d050      	beq.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	d14b      	bne.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	429a      	cmp	r2, r3
 8004874:	d10a      	bne.n	800488c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	db04      	blt.n	80048aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	6959      	ldr	r1, [r3, #20]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4a15      	ldr	r2, [pc, #84]	; (8004910 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80048ba:	4413      	add	r3, r2
 80048bc:	4299      	cmp	r1, r3
 80048be:	d101      	bne.n	80048c4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80048c4:	2300      	movs	r3, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01c      	beq.n	8004904 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe f926 	bl	8002b20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d903      	bls.n	80048e8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a06      	ldr	r2, [pc, #24]	; (8004910 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80048f6:	441a      	add	r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7fe f8b3 	bl	8002a6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004904:	bf00      	nop
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	2000090c 	.word	0x2000090c
 8004910:	20000910 	.word	0x20000910
 8004914:	20000de8 	.word	0x20000de8

08004918 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <pvTaskIncrementMutexHeldCount+0x24>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <pvTaskIncrementMutexHeldCount+0x24>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800492a:	3201      	adds	r2, #1
 800492c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800492e:	4b03      	ldr	r3, [pc, #12]	; (800493c <pvTaskIncrementMutexHeldCount+0x24>)
 8004930:	681b      	ldr	r3, [r3, #0]
	}
 8004932:	4618      	mov	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	2000090c 	.word	0x2000090c

08004940 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3304      	adds	r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe f8e2 	bl	8002b20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d10a      	bne.n	800497a <prvAddCurrentTaskToDelayedList+0x3a>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800496a:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4819      	ldr	r0, [pc, #100]	; (80049d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004974:	f7fe f879 	bl	8002a6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004978:	e026      	b.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	429a      	cmp	r2, r3
 8004990:	d209      	bcs.n	80049a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7fe f886 	bl	8002ab0 <vListInsert>
}
 80049a4:	e010      	b.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fe f87c 	bl	8002ab0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d202      	bcs.n	80049c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6013      	str	r3, [r2, #0]
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000de4 	.word	0x20000de4
 80049d4:	2000090c 	.word	0x2000090c
 80049d8:	20000dcc 	.word	0x20000dcc
 80049dc:	20000d9c 	.word	0x20000d9c
 80049e0:	20000d98 	.word	0x20000d98
 80049e4:	20000e00 	.word	0x20000e00

080049e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049f2:	f000 facb 	bl	8004f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <xTimerCreateTimerTask+0x80>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d021      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a06:	1d3a      	adds	r2, r7, #4
 8004a08:	f107 0108 	add.w	r1, r7, #8
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fd ffe5 	bl	80029e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	9202      	str	r2, [sp, #8]
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2302      	movs	r3, #2
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	460a      	mov	r2, r1
 8004a28:	4910      	ldr	r1, [pc, #64]	; (8004a6c <xTimerCreateTimerTask+0x84>)
 8004a2a:	4811      	ldr	r0, [pc, #68]	; (8004a70 <xTimerCreateTimerTask+0x88>)
 8004a2c:	f7fe ffa0 	bl	8003970 <xTaskCreateStatic>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	613b      	str	r3, [r7, #16]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a5e:	697b      	ldr	r3, [r7, #20]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000e3c 	.word	0x20000e3c
 8004a6c:	08006754 	.word	0x08006754
 8004a70:	08004b95 	.word	0x08004b95
 8004a74:	20000e40 	.word	0x20000e40

08004a78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	623b      	str	r3, [r7, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02a      	beq.n	8004b04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	dc18      	bgt.n	8004af2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ac0:	f7ff fdaa 	bl	8004618 <xTaskGetSchedulerState>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d109      	bne.n	8004ade <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	f107 0110 	add.w	r1, r7, #16
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	f7fe fa45 	bl	8002f64 <xQueueGenericSend>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24
 8004adc:	e012      	b.n	8004b04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f107 0110 	add.w	r1, r7, #16
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f7fe fa3b 	bl	8002f64 <xQueueGenericSend>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24
 8004af0:	e008      	b.n	8004b04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af2:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	f107 0110 	add.w	r1, r7, #16
 8004afa:	2300      	movs	r3, #0
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	f7fe fb2f 	bl	8003160 <xQueueGenericSendFromISR>
 8004b02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000e3c 	.word	0x20000e3c

08004b14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <prvProcessExpiredTimer+0x7c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd fff7 	bl	8002b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d122      	bne.n	8004b80 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	18d1      	adds	r1, r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f000 f8c8 	bl	8004cdc <prvInsertTimerInActiveList>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b52:	2300      	movs	r3, #0
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	2300      	movs	r3, #0
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	6978      	ldr	r0, [r7, #20]
 8004b5e:	f7ff ff8b 	bl	8004a78 <xTimerGenericCommand>
 8004b62:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60fb      	str	r3, [r7, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	6978      	ldr	r0, [r7, #20]
 8004b86:	4798      	blx	r3
}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000e34 	.word	0x20000e34

08004b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f857 	bl	8004c54 <prvGetNextExpireTime>
 8004ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4619      	mov	r1, r3
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f803 	bl	8004bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bb2:	f000 f8d5 	bl	8004d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb6:	e7f1      	b.n	8004b9c <prvTimerTask+0x8>

08004bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bc2:	f7ff f929 	bl	8003e18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bc6:	f107 0308 	add.w	r3, r7, #8
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f866 	bl	8004c9c <prvSampleTimeNow>
 8004bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d130      	bne.n	8004c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <prvProcessTimerOrBlockTask+0x3c>
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d806      	bhi.n	8004bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004be6:	f7ff f925 	bl	8003e34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff91 	bl	8004b14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bf2:	e024      	b.n	8004c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <prvProcessTimerOrBlockTask+0x90>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <prvProcessTimerOrBlockTask+0x94>)
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fe fe75 	bl	8003908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c1e:	f7ff f909 	bl	8003e34 <xTaskResumeAll>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <prvProcessTimerOrBlockTask+0x98>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
}
 8004c38:	e001      	b.n	8004c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c3a:	f7ff f8fb 	bl	8003e34 <xTaskResumeAll>
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000e38 	.word	0x20000e38
 8004c4c:	20000e3c 	.word	0x20000e3c
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <prvGetNextExpireTime+0x44>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf0c      	ite	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	2300      	movne	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <prvGetNextExpireTime+0x44>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e001      	b.n	8004c8a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000e34 	.word	0x20000e34

08004c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ca4:	f7ff f964 	bl	8003f70 <xTaskGetTickCount>
 8004ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <prvSampleTimeNow+0x3c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d205      	bcs.n	8004cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cb4:	f000 f908 	bl	8004ec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e002      	b.n	8004cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cc6:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <prvSampleTimeNow+0x3c>)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000e44 	.word	0x20000e44

08004cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d812      	bhi.n	8004d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e01b      	b.n	8004d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <prvInsertTimerInActiveList+0x7c>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fd fec5 	bl	8002ab0 <vListInsert>
 8004d26:	e012      	b.n	8004d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d206      	bcs.n	8004d3e <prvInsertTimerInActiveList+0x62>
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e007      	b.n	8004d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <prvInsertTimerInActiveList+0x80>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fd feb1 	bl	8002ab0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000e38 	.word	0x20000e38
 8004d5c:	20000e34 	.word	0x20000e34

08004d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08e      	sub	sp, #56	; 0x38
 8004d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d66:	e09d      	b.n	8004ea4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da18      	bge.n	8004da0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	3304      	adds	r3, #4
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	61fb      	str	r3, [r7, #28]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d96:	6850      	ldr	r0, [r2, #4]
 8004d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9a:	6892      	ldr	r2, [r2, #8]
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	db7e      	blt.n	8004ea4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	3304      	adds	r3, #4
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd feb2 	bl	8002b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff ff6c 	bl	8004c9c <prvSampleTimeNow>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	d86a      	bhi.n	8004ea2 <prvProcessReceivedCommands+0x142>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <prvProcessReceivedCommands+0x74>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004dfd 	.word	0x08004dfd
 8004de0:	08004ea5 	.word	0x08004ea5
 8004de4:	08004e59 	.word	0x08004e59
 8004de8:	08004e91 	.word	0x08004e91
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004dfd 	.word	0x08004dfd
 8004df4:	08004ea5 	.word	0x08004ea5
 8004df8:	08004e59 	.word	0x08004e59
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	18d1      	adds	r1, r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0a:	f7ff ff67 	bl	8004cdc <prvInsertTimerInActiveList>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d047      	beq.n	8004ea4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d13f      	bne.n	8004ea4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	441a      	add	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	2100      	movs	r1, #0
 8004e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e36:	f7ff fe1f 	bl	8004a78 <xTimerGenericCommand>
 8004e3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d130      	bne.n	8004ea4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	61bb      	str	r3, [r7, #24]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	617b      	str	r3, [r7, #20]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	18d1      	adds	r1, r2, r3
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8a:	f7ff ff27 	bl	8004cdc <prvInsertTimerInActiveList>
					break;
 8004e8e:	e009      	b.n	8004ea4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9c:	f000 fb6a 	bl	8005574 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ea0:	e000      	b.n	8004ea4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004ea2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <prvProcessReceivedCommands+0x164>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	1d39      	adds	r1, r7, #4
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe f9ef 	bl	8003290 <xQueueReceive>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f af57 	bne.w	8004d68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	3730      	adds	r7, #48	; 0x30
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000e3c 	.word	0x20000e3c

08004ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ece:	e045      	b.n	8004f5c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ed0:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <prvSwitchTimerLists+0xbc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eda:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <prvSwitchTimerLists+0xbc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fd fe19 	bl	8002b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d12e      	bne.n	8004f5c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d90e      	bls.n	8004f2e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <prvSwitchTimerLists+0xbc>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fd fdc2 	bl	8002ab0 <vListInsert>
 8004f2c:	e016      	b.n	8004f5c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	2100      	movs	r1, #0
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff fd9d 	bl	8004a78 <xTimerGenericCommand>
 8004f3e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	603b      	str	r3, [r7, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <prvSwitchTimerLists+0xbc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1b4      	bne.n	8004ed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <prvSwitchTimerLists+0xbc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <prvSwitchTimerLists+0xc0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <prvSwitchTimerLists+0xbc>)
 8004f72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f74:	4a04      	ldr	r2, [pc, #16]	; (8004f88 <prvSwitchTimerLists+0xc0>)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6013      	str	r3, [r2, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000e34 	.word	0x20000e34
 8004f88:	20000e38 	.word	0x20000e38

08004f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f92:	f000 f92b 	bl	80051ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d120      	bne.n	8004fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f9e:	4814      	ldr	r0, [pc, #80]	; (8004ff0 <prvCheckForValidListAndQueue+0x64>)
 8004fa0:	f7fd fd38 	bl	8002a14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fa4:	4813      	ldr	r0, [pc, #76]	; (8004ff4 <prvCheckForValidListAndQueue+0x68>)
 8004fa6:	f7fd fd35 	bl	8002a14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <prvCheckForValidListAndQueue+0x6c>)
 8004fac:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <prvCheckForValidListAndQueue+0x64>)
 8004fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <prvCheckForValidListAndQueue+0x70>)
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <prvCheckForValidListAndQueue+0x68>)
 8004fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4b11      	ldr	r3, [pc, #68]	; (8005000 <prvCheckForValidListAndQueue+0x74>)
 8004fbc:	4a11      	ldr	r2, [pc, #68]	; (8005004 <prvCheckForValidListAndQueue+0x78>)
 8004fbe:	2110      	movs	r1, #16
 8004fc0:	200a      	movs	r0, #10
 8004fc2:	f7fd fe3f 	bl	8002c44 <xQueueGenericCreateStatic>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	490b      	ldr	r1, [pc, #44]	; (8005008 <prvCheckForValidListAndQueue+0x7c>)
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fc6c 	bl	80038b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fe0:	f000 f934 	bl	800524c <vPortExitCritical>
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000e3c 	.word	0x20000e3c
 8004ff0:	20000e0c 	.word	0x20000e0c
 8004ff4:	20000e20 	.word	0x20000e20
 8004ff8:	20000e34 	.word	0x20000e34
 8004ffc:	20000e38 	.word	0x20000e38
 8005000:	20000ee8 	.word	0x20000ee8
 8005004:	20000e48 	.word	0x20000e48
 8005008:	0800675c 	.word	0x0800675c

0800500c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b04      	subs	r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3b04      	subs	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3b04      	subs	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800503c:	4a08      	ldr	r2, [pc, #32]	; (8005060 <pxPortInitialiseStack+0x54>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3b14      	subs	r3, #20
 8005046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b20      	subs	r3, #32
 8005052:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	08005065 	.word	0x08005065

08005064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <prvTaskExitError+0x54>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d00a      	beq.n	800508e <prvTaskExitError+0x2a>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <prvTaskExitError+0x28>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60bb      	str	r3, [r7, #8]
}
 80050a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050a2:	bf00      	nop
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0fc      	beq.n	80050a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	2000000c 	.word	0x2000000c
 80050bc:	00000000 	.word	0x00000000

080050c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <pxCurrentTCBConst2>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050ca:	f380 8809 	msr	PSP, r0
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	f04e 0e0d 	orr.w	lr, lr, #13
 80050de:	4770      	bx	lr

080050e0 <pxCurrentTCBConst2>:
 80050e0:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80050e8:	4806      	ldr	r0, [pc, #24]	; (8005104 <prvPortStartFirstTask+0x1c>)
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f380 8808 	msr	MSP, r0
 80050f2:	b662      	cpsie	i
 80050f4:	b661      	cpsie	f
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	df00      	svc	0
 8005100:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005102:	bf00      	nop
 8005104:	e000ed08 	.word	0xe000ed08

08005108 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800510e:	4b32      	ldr	r3, [pc, #200]	; (80051d8 <xPortStartScheduler+0xd0>)
 8005110:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <xPortStartScheduler+0xd4>)
 8005134:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <xPortStartScheduler+0xd8>)
 8005138:	2207      	movs	r2, #7
 800513a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800513c:	e009      	b.n	8005152 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800513e:	4b28      	ldr	r3, [pc, #160]	; (80051e0 <xPortStartScheduler+0xd8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3b01      	subs	r3, #1
 8005144:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <xPortStartScheduler+0xd8>)
 8005146:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	b2db      	uxtb	r3, r3
 8005150:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d0ef      	beq.n	800513e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <xPortStartScheduler+0xd8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1c3 0307 	rsb	r3, r3, #7
 8005166:	2b04      	cmp	r3, #4
 8005168:	d00a      	beq.n	8005180 <xPortStartScheduler+0x78>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	60bb      	str	r3, [r7, #8]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005180:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <xPortStartScheduler+0xd8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <xPortStartScheduler+0xd8>)
 8005188:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <xPortStartScheduler+0xd8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <xPortStartScheduler+0xd8>)
 8005194:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800519e:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <xPortStartScheduler+0xdc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <xPortStartScheduler+0xdc>)
 80051a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051aa:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <xPortStartScheduler+0xdc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a0d      	ldr	r2, [pc, #52]	; (80051e4 <xPortStartScheduler+0xdc>)
 80051b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051b6:	f000 f8b9 	bl	800532c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <xPortStartScheduler+0xe0>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051c0:	f7ff ff92 	bl	80050e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051c4:	f7fe ffa0 	bl	8004108 <vTaskSwitchContext>
	prvTaskExitError();
 80051c8:	f7ff ff4c 	bl	8005064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	e000e400 	.word	0xe000e400
 80051dc:	20000f38 	.word	0x20000f38
 80051e0:	20000f3c 	.word	0x20000f3c
 80051e4:	e000ed20 	.word	0xe000ed20
 80051e8:	2000000c 	.word	0x2000000c

080051ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	607b      	str	r3, [r7, #4]
}
 8005204:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <vPortEnterCritical+0x58>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <vPortEnterCritical+0x58>)
 800520e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <vPortEnterCritical+0x58>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10f      	bne.n	8005238 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <vPortEnterCritical+0x5c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <vPortEnterCritical+0x4c>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	603b      	str	r3, [r7, #0]
}
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <vPortEnterCritical+0x4a>
	}
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	2000000c 	.word	0x2000000c
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <vPortExitCritical+0x4c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <vPortExitCritical+0x24>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <vPortExitCritical+0x4c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3b01      	subs	r3, #1
 8005276:	4a08      	ldr	r2, [pc, #32]	; (8005298 <vPortExitCritical+0x4c>)
 8005278:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <vPortExitCritical+0x4c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <vPortExitCritical+0x42>
 8005282:	2300      	movs	r3, #0
 8005284:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f383 8811 	msr	BASEPRI, r3
}
 800528c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	2000000c 	.word	0x2000000c
 800529c:	00000000 	.word	0x00000000

080052a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052a0:	f3ef 8009 	mrs	r0, PSP
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <pxCurrentTCBConst>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052b0:	6010      	str	r0, [r2, #0]
 80052b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052ba:	f380 8811 	msr	BASEPRI, r0
 80052be:	f7fe ff23 	bl	8004108 <vTaskSwitchContext>
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8811 	msr	BASEPRI, r0
 80052ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	6808      	ldr	r0, [r1, #0]
 80052d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052d6:	f380 8809 	msr	PSP, r0
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	4770      	bx	lr

080052e0 <pxCurrentTCBConst>:
 80052e0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005302:	f7fe fe43 	bl	8003f8c <xTaskIncrementTick>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <SysTick_Handler+0x40>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <vPortSetupTimerInterrupt+0x30>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <vPortSetupTimerInterrupt+0x38>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a09      	ldr	r2, [pc, #36]	; (8005368 <vPortSetupTimerInterrupt+0x3c>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	4a08      	ldr	r2, [pc, #32]	; (800536c <vPortSetupTimerInterrupt+0x40>)
 800534a:	3b01      	subs	r3, #1
 800534c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800534e:	4b03      	ldr	r3, [pc, #12]	; (800535c <vPortSetupTimerInterrupt+0x30>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	e000e010 	.word	0xe000e010
 8005360:	e000e018 	.word	0xe000e018
 8005364:	20000000 	.word	0x20000000
 8005368:	10624dd3 	.word	0x10624dd3
 800536c:	e000e014 	.word	0xe000e014

08005370 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005376:	f3ef 8305 	mrs	r3, IPSR
 800537a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b0f      	cmp	r3, #15
 8005380:	d914      	bls.n	80053ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005382:	4a16      	ldr	r2, [pc, #88]	; (80053dc <vPortValidateInterruptPriority+0x6c>)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800538c:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <vPortValidateInterruptPriority+0x70>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	7afa      	ldrb	r2, [r7, #11]
 8005392:	429a      	cmp	r2, r3
 8005394:	d20a      	bcs.n	80053ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	607b      	str	r3, [r7, #4]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053ac:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <vPortValidateInterruptPriority+0x74>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <vPortValidateInterruptPriority+0x78>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d90a      	bls.n	80053d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	603b      	str	r3, [r7, #0]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <vPortValidateInterruptPriority+0x60>
	}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr
 80053dc:	e000e3f0 	.word	0xe000e3f0
 80053e0:	20000f38 	.word	0x20000f38
 80053e4:	e000ed0c 	.word	0xe000ed0c
 80053e8:	20000f3c 	.word	0x20000f3c

080053ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053f8:	f7fe fd0e 	bl	8003e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053fc:	4b58      	ldr	r3, [pc, #352]	; (8005560 <pvPortMalloc+0x174>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005404:	f000 f910 	bl	8005628 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005408:	4b56      	ldr	r3, [pc, #344]	; (8005564 <pvPortMalloc+0x178>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	f040 808e 	bne.w	8005532 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01d      	beq.n	8005458 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800541c:	2208      	movs	r2, #8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b00      	cmp	r3, #0
 800542c:	d014      	beq.n	8005458 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f023 0307 	bic.w	r3, r3, #7
 8005434:	3308      	adds	r3, #8
 8005436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <pvPortMalloc+0x6c>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	617b      	str	r3, [r7, #20]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d069      	beq.n	8005532 <pvPortMalloc+0x146>
 800545e:	4b42      	ldr	r3, [pc, #264]	; (8005568 <pvPortMalloc+0x17c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d864      	bhi.n	8005532 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005468:	4b40      	ldr	r3, [pc, #256]	; (800556c <pvPortMalloc+0x180>)
 800546a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800546c:	4b3f      	ldr	r3, [pc, #252]	; (800556c <pvPortMalloc+0x180>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005472:	e004      	b.n	800547e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d903      	bls.n	8005490 <pvPortMalloc+0xa4>
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f1      	bne.n	8005474 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005490:	4b33      	ldr	r3, [pc, #204]	; (8005560 <pvPortMalloc+0x174>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005496:	429a      	cmp	r2, r3
 8005498:	d04b      	beq.n	8005532 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2208      	movs	r2, #8
 80054a0:	4413      	add	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	2308      	movs	r3, #8
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d91f      	bls.n	80054fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <pvPortMalloc+0xf8>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	613b      	str	r3, [r7, #16]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	1ad2      	subs	r2, r2, r3
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054f6:	69b8      	ldr	r0, [r7, #24]
 80054f8:	f000 f8f8 	bl	80056ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <pvPortMalloc+0x17c>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	4a18      	ldr	r2, [pc, #96]	; (8005568 <pvPortMalloc+0x17c>)
 8005508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <pvPortMalloc+0x17c>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b18      	ldr	r3, [pc, #96]	; (8005570 <pvPortMalloc+0x184>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d203      	bcs.n	800551e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <pvPortMalloc+0x17c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <pvPortMalloc+0x184>)
 800551c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <pvPortMalloc+0x178>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	431a      	orrs	r2, r3
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005532:	f7fe fc7f 	bl	8003e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <pvPortMalloc+0x16a>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	60fb      	str	r3, [r7, #12]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <pvPortMalloc+0x168>
	return pvReturn;
 8005556:	69fb      	ldr	r3, [r7, #28]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3728      	adds	r7, #40	; 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20001b48 	.word	0x20001b48
 8005564:	20001b54 	.word	0x20001b54
 8005568:	20001b4c 	.word	0x20001b4c
 800556c:	20001b40 	.word	0x20001b40
 8005570:	20001b50 	.word	0x20001b50

08005574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d048      	beq.n	8005618 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005586:	2308      	movs	r3, #8
 8005588:	425b      	negs	r3, r3
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4b21      	ldr	r3, [pc, #132]	; (8005620 <vPortFree+0xac>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <vPortFree+0x44>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	60fb      	str	r3, [r7, #12]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <vPortFree+0x62>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60bb      	str	r3, [r7, #8]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <vPortFree+0xac>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d019      	beq.n	8005618 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d115      	bne.n	8005618 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <vPortFree+0xac>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	401a      	ands	r2, r3
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055fc:	f7fe fc0c 	bl	8003e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	4b07      	ldr	r3, [pc, #28]	; (8005624 <vPortFree+0xb0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4413      	add	r3, r2
 800560a:	4a06      	ldr	r2, [pc, #24]	; (8005624 <vPortFree+0xb0>)
 800560c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800560e:	6938      	ldr	r0, [r7, #16]
 8005610:	f000 f86c 	bl	80056ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005614:	f7fe fc0e 	bl	8003e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005618:	bf00      	nop
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20001b54 	.word	0x20001b54
 8005624:	20001b4c 	.word	0x20001b4c

08005628 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800562e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005632:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005634:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <prvHeapInit+0xac>)
 8005636:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3307      	adds	r3, #7
 8005646:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0307 	bic.w	r3, r3, #7
 800564e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <prvHeapInit+0xac>)
 8005658:	4413      	add	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005660:	4a1d      	ldr	r2, [pc, #116]	; (80056d8 <prvHeapInit+0xb0>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005666:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <prvHeapInit+0xb0>)
 8005668:	2200      	movs	r2, #0
 800566a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4413      	add	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005674:	2208      	movs	r2, #8
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0307 	bic.w	r3, r3, #7
 8005682:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a15      	ldr	r2, [pc, #84]	; (80056dc <prvHeapInit+0xb4>)
 8005688:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <prvHeapInit+0xb4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <prvHeapInit+0xb4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <prvHeapInit+0xb4>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <prvHeapInit+0xb8>)
 80056b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <prvHeapInit+0xbc>)
 80056be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <prvHeapInit+0xc0>)
 80056c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056c6:	601a      	str	r2, [r3, #0]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000f40 	.word	0x20000f40
 80056d8:	20001b40 	.word	0x20001b40
 80056dc:	20001b48 	.word	0x20001b48
 80056e0:	20001b50 	.word	0x20001b50
 80056e4:	20001b4c 	.word	0x20001b4c
 80056e8:	20001b54 	.word	0x20001b54

080056ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056f4:	4b27      	ldr	r3, [pc, #156]	; (8005794 <prvInsertBlockIntoFreeList+0xa8>)
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e002      	b.n	8005700 <prvInsertBlockIntoFreeList+0x14>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d8f7      	bhi.n	80056fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	4413      	add	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d108      	bne.n	800572e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	441a      	add	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	441a      	add	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d118      	bne.n	8005774 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <prvInsertBlockIntoFreeList+0xac>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d00d      	beq.n	800576a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	441a      	add	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e008      	b.n	800577c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <prvInsertBlockIntoFreeList+0xac>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e003      	b.n	800577c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d002      	beq.n	800578a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	20001b40 	.word	0x20001b40
 8005798:	20001b48 	.word	0x20001b48

0800579c <std>:
 800579c:	2300      	movs	r3, #0
 800579e:	b510      	push	{r4, lr}
 80057a0:	4604      	mov	r4, r0
 80057a2:	e9c0 3300 	strd	r3, r3, [r0]
 80057a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057aa:	6083      	str	r3, [r0, #8]
 80057ac:	8181      	strh	r1, [r0, #12]
 80057ae:	6643      	str	r3, [r0, #100]	; 0x64
 80057b0:	81c2      	strh	r2, [r0, #14]
 80057b2:	6183      	str	r3, [r0, #24]
 80057b4:	4619      	mov	r1, r3
 80057b6:	2208      	movs	r2, #8
 80057b8:	305c      	adds	r0, #92	; 0x5c
 80057ba:	f000 f906 	bl	80059ca <memset>
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <std+0x58>)
 80057c0:	6224      	str	r4, [r4, #32]
 80057c2:	6263      	str	r3, [r4, #36]	; 0x24
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <std+0x5c>)
 80057c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <std+0x60>)
 80057ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <std+0x64>)
 80057ce:	6323      	str	r3, [r4, #48]	; 0x30
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <std+0x68>)
 80057d2:	429c      	cmp	r4, r3
 80057d4:	d006      	beq.n	80057e4 <std+0x48>
 80057d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80057da:	4294      	cmp	r4, r2
 80057dc:	d002      	beq.n	80057e4 <std+0x48>
 80057de:	33d0      	adds	r3, #208	; 0xd0
 80057e0:	429c      	cmp	r4, r3
 80057e2:	d105      	bne.n	80057f0 <std+0x54>
 80057e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ec:	f000 b9bc 	b.w	8005b68 <__retarget_lock_init_recursive>
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	bf00      	nop
 80057f4:	08005945 	.word	0x08005945
 80057f8:	08005967 	.word	0x08005967
 80057fc:	0800599f 	.word	0x0800599f
 8005800:	080059c3 	.word	0x080059c3
 8005804:	20001b58 	.word	0x20001b58

08005808 <stdio_exit_handler>:
 8005808:	4a02      	ldr	r2, [pc, #8]	; (8005814 <stdio_exit_handler+0xc>)
 800580a:	4903      	ldr	r1, [pc, #12]	; (8005818 <stdio_exit_handler+0x10>)
 800580c:	4803      	ldr	r0, [pc, #12]	; (800581c <stdio_exit_handler+0x14>)
 800580e:	f000 b869 	b.w	80058e4 <_fwalk_sglue>
 8005812:	bf00      	nop
 8005814:	20000010 	.word	0x20000010
 8005818:	08006425 	.word	0x08006425
 800581c:	2000001c 	.word	0x2000001c

08005820 <cleanup_stdio>:
 8005820:	6841      	ldr	r1, [r0, #4]
 8005822:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <cleanup_stdio+0x34>)
 8005824:	b510      	push	{r4, lr}
 8005826:	4299      	cmp	r1, r3
 8005828:	4604      	mov	r4, r0
 800582a:	d001      	beq.n	8005830 <cleanup_stdio+0x10>
 800582c:	f000 fdfa 	bl	8006424 <_fflush_r>
 8005830:	68a1      	ldr	r1, [r4, #8]
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <cleanup_stdio+0x38>)
 8005834:	4299      	cmp	r1, r3
 8005836:	d002      	beq.n	800583e <cleanup_stdio+0x1e>
 8005838:	4620      	mov	r0, r4
 800583a:	f000 fdf3 	bl	8006424 <_fflush_r>
 800583e:	68e1      	ldr	r1, [r4, #12]
 8005840:	4b06      	ldr	r3, [pc, #24]	; (800585c <cleanup_stdio+0x3c>)
 8005842:	4299      	cmp	r1, r3
 8005844:	d004      	beq.n	8005850 <cleanup_stdio+0x30>
 8005846:	4620      	mov	r0, r4
 8005848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800584c:	f000 bdea 	b.w	8006424 <_fflush_r>
 8005850:	bd10      	pop	{r4, pc}
 8005852:	bf00      	nop
 8005854:	20001b58 	.word	0x20001b58
 8005858:	20001bc0 	.word	0x20001bc0
 800585c:	20001c28 	.word	0x20001c28

08005860 <global_stdio_init.part.0>:
 8005860:	b510      	push	{r4, lr}
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <global_stdio_init.part.0+0x30>)
 8005864:	4c0b      	ldr	r4, [pc, #44]	; (8005894 <global_stdio_init.part.0+0x34>)
 8005866:	4a0c      	ldr	r2, [pc, #48]	; (8005898 <global_stdio_init.part.0+0x38>)
 8005868:	4620      	mov	r0, r4
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	2104      	movs	r1, #4
 800586e:	2200      	movs	r2, #0
 8005870:	f7ff ff94 	bl	800579c <std>
 8005874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005878:	2201      	movs	r2, #1
 800587a:	2109      	movs	r1, #9
 800587c:	f7ff ff8e 	bl	800579c <std>
 8005880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005884:	2202      	movs	r2, #2
 8005886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588a:	2112      	movs	r1, #18
 800588c:	f7ff bf86 	b.w	800579c <std>
 8005890:	20001c90 	.word	0x20001c90
 8005894:	20001b58 	.word	0x20001b58
 8005898:	08005809 	.word	0x08005809

0800589c <__sfp_lock_acquire>:
 800589c:	4801      	ldr	r0, [pc, #4]	; (80058a4 <__sfp_lock_acquire+0x8>)
 800589e:	f000 b964 	b.w	8005b6a <__retarget_lock_acquire_recursive>
 80058a2:	bf00      	nop
 80058a4:	20001c99 	.word	0x20001c99

080058a8 <__sfp_lock_release>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__sfp_lock_release+0x8>)
 80058aa:	f000 b95f 	b.w	8005b6c <__retarget_lock_release_recursive>
 80058ae:	bf00      	nop
 80058b0:	20001c99 	.word	0x20001c99

080058b4 <__sinit>:
 80058b4:	b510      	push	{r4, lr}
 80058b6:	4604      	mov	r4, r0
 80058b8:	f7ff fff0 	bl	800589c <__sfp_lock_acquire>
 80058bc:	6a23      	ldr	r3, [r4, #32]
 80058be:	b11b      	cbz	r3, 80058c8 <__sinit+0x14>
 80058c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c4:	f7ff bff0 	b.w	80058a8 <__sfp_lock_release>
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <__sinit+0x28>)
 80058ca:	6223      	str	r3, [r4, #32]
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <__sinit+0x2c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f5      	bne.n	80058c0 <__sinit+0xc>
 80058d4:	f7ff ffc4 	bl	8005860 <global_stdio_init.part.0>
 80058d8:	e7f2      	b.n	80058c0 <__sinit+0xc>
 80058da:	bf00      	nop
 80058dc:	08005821 	.word	0x08005821
 80058e0:	20001c90 	.word	0x20001c90

080058e4 <_fwalk_sglue>:
 80058e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e8:	4607      	mov	r7, r0
 80058ea:	4688      	mov	r8, r1
 80058ec:	4614      	mov	r4, r2
 80058ee:	2600      	movs	r6, #0
 80058f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058f4:	f1b9 0901 	subs.w	r9, r9, #1
 80058f8:	d505      	bpl.n	8005906 <_fwalk_sglue+0x22>
 80058fa:	6824      	ldr	r4, [r4, #0]
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	d1f7      	bne.n	80058f0 <_fwalk_sglue+0xc>
 8005900:	4630      	mov	r0, r6
 8005902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005906:	89ab      	ldrh	r3, [r5, #12]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d907      	bls.n	800591c <_fwalk_sglue+0x38>
 800590c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005910:	3301      	adds	r3, #1
 8005912:	d003      	beq.n	800591c <_fwalk_sglue+0x38>
 8005914:	4629      	mov	r1, r5
 8005916:	4638      	mov	r0, r7
 8005918:	47c0      	blx	r8
 800591a:	4306      	orrs	r6, r0
 800591c:	3568      	adds	r5, #104	; 0x68
 800591e:	e7e9      	b.n	80058f4 <_fwalk_sglue+0x10>

08005920 <iprintf>:
 8005920:	b40f      	push	{r0, r1, r2, r3}
 8005922:	b507      	push	{r0, r1, r2, lr}
 8005924:	4906      	ldr	r1, [pc, #24]	; (8005940 <iprintf+0x20>)
 8005926:	ab04      	add	r3, sp, #16
 8005928:	6808      	ldr	r0, [r1, #0]
 800592a:	f853 2b04 	ldr.w	r2, [r3], #4
 800592e:	6881      	ldr	r1, [r0, #8]
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	f000 fa47 	bl	8005dc4 <_vfiprintf_r>
 8005936:	b003      	add	sp, #12
 8005938:	f85d eb04 	ldr.w	lr, [sp], #4
 800593c:	b004      	add	sp, #16
 800593e:	4770      	bx	lr
 8005940:	20000068 	.word	0x20000068

08005944 <__sread>:
 8005944:	b510      	push	{r4, lr}
 8005946:	460c      	mov	r4, r1
 8005948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594c:	f000 f8be 	bl	8005acc <_read_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	bfab      	itete	ge
 8005954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005956:	89a3      	ldrhlt	r3, [r4, #12]
 8005958:	181b      	addge	r3, r3, r0
 800595a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800595e:	bfac      	ite	ge
 8005960:	6563      	strge	r3, [r4, #84]	; 0x54
 8005962:	81a3      	strhlt	r3, [r4, #12]
 8005964:	bd10      	pop	{r4, pc}

08005966 <__swrite>:
 8005966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596a:	461f      	mov	r7, r3
 800596c:	898b      	ldrh	r3, [r1, #12]
 800596e:	4605      	mov	r5, r0
 8005970:	05db      	lsls	r3, r3, #23
 8005972:	460c      	mov	r4, r1
 8005974:	4616      	mov	r6, r2
 8005976:	d505      	bpl.n	8005984 <__swrite+0x1e>
 8005978:	2302      	movs	r3, #2
 800597a:	2200      	movs	r2, #0
 800597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005980:	f000 f892 	bl	8005aa8 <_lseek_r>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	4632      	mov	r2, r6
 8005988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	4628      	mov	r0, r5
 8005990:	463b      	mov	r3, r7
 8005992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599a:	f000 b8a9 	b.w	8005af0 <_write_r>

0800599e <__sseek>:
 800599e:	b510      	push	{r4, lr}
 80059a0:	460c      	mov	r4, r1
 80059a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a6:	f000 f87f 	bl	8005aa8 <_lseek_r>
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	bf15      	itete	ne
 80059b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80059b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059ba:	81a3      	strheq	r3, [r4, #12]
 80059bc:	bf18      	it	ne
 80059be:	81a3      	strhne	r3, [r4, #12]
 80059c0:	bd10      	pop	{r4, pc}

080059c2 <__sclose>:
 80059c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c6:	f000 b809 	b.w	80059dc <_close_r>

080059ca <memset>:
 80059ca:	4603      	mov	r3, r0
 80059cc:	4402      	add	r2, r0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d100      	bne.n	80059d4 <memset+0xa>
 80059d2:	4770      	bx	lr
 80059d4:	f803 1b01 	strb.w	r1, [r3], #1
 80059d8:	e7f9      	b.n	80059ce <memset+0x4>
	...

080059dc <_close_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	2300      	movs	r3, #0
 80059e0:	4d05      	ldr	r5, [pc, #20]	; (80059f8 <_close_r+0x1c>)
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	f7fa fee5 	bl	80007b6 <_close>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_close_r+0x1a>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_close_r+0x1a>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20001c94 	.word	0x20001c94

080059fc <_reclaim_reent>:
 80059fc:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <_reclaim_reent+0xa8>)
 80059fe:	b570      	push	{r4, r5, r6, lr}
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4604      	mov	r4, r0
 8005a04:	4283      	cmp	r3, r0
 8005a06:	d04b      	beq.n	8005aa0 <_reclaim_reent+0xa4>
 8005a08:	69c3      	ldr	r3, [r0, #28]
 8005a0a:	b143      	cbz	r3, 8005a1e <_reclaim_reent+0x22>
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d144      	bne.n	8005a9c <_reclaim_reent+0xa0>
 8005a12:	69e3      	ldr	r3, [r4, #28]
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	b111      	cbz	r1, 8005a1e <_reclaim_reent+0x22>
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 f8b7 	bl	8005b8c <_free_r>
 8005a1e:	6961      	ldr	r1, [r4, #20]
 8005a20:	b111      	cbz	r1, 8005a28 <_reclaim_reent+0x2c>
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f8b2 	bl	8005b8c <_free_r>
 8005a28:	69e1      	ldr	r1, [r4, #28]
 8005a2a:	b111      	cbz	r1, 8005a32 <_reclaim_reent+0x36>
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 f8ad 	bl	8005b8c <_free_r>
 8005a32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a34:	b111      	cbz	r1, 8005a3c <_reclaim_reent+0x40>
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 f8a8 	bl	8005b8c <_free_r>
 8005a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a3e:	b111      	cbz	r1, 8005a46 <_reclaim_reent+0x4a>
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 f8a3 	bl	8005b8c <_free_r>
 8005a46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a48:	b111      	cbz	r1, 8005a50 <_reclaim_reent+0x54>
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 f89e 	bl	8005b8c <_free_r>
 8005a50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a52:	b111      	cbz	r1, 8005a5a <_reclaim_reent+0x5e>
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 f899 	bl	8005b8c <_free_r>
 8005a5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005a5c:	b111      	cbz	r1, 8005a64 <_reclaim_reent+0x68>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 f894 	bl	8005b8c <_free_r>
 8005a64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005a66:	b111      	cbz	r1, 8005a6e <_reclaim_reent+0x72>
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 f88f 	bl	8005b8c <_free_r>
 8005a6e:	6a23      	ldr	r3, [r4, #32]
 8005a70:	b1b3      	cbz	r3, 8005aa0 <_reclaim_reent+0xa4>
 8005a72:	4620      	mov	r0, r4
 8005a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a78:	4718      	bx	r3
 8005a7a:	5949      	ldr	r1, [r1, r5]
 8005a7c:	b941      	cbnz	r1, 8005a90 <_reclaim_reent+0x94>
 8005a7e:	3504      	adds	r5, #4
 8005a80:	69e3      	ldr	r3, [r4, #28]
 8005a82:	2d80      	cmp	r5, #128	; 0x80
 8005a84:	68d9      	ldr	r1, [r3, #12]
 8005a86:	d1f8      	bne.n	8005a7a <_reclaim_reent+0x7e>
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 f87f 	bl	8005b8c <_free_r>
 8005a8e:	e7c0      	b.n	8005a12 <_reclaim_reent+0x16>
 8005a90:	680e      	ldr	r6, [r1, #0]
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 f87a 	bl	8005b8c <_free_r>
 8005a98:	4631      	mov	r1, r6
 8005a9a:	e7ef      	b.n	8005a7c <_reclaim_reent+0x80>
 8005a9c:	2500      	movs	r5, #0
 8005a9e:	e7ef      	b.n	8005a80 <_reclaim_reent+0x84>
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000068 	.word	0x20000068

08005aa8 <_lseek_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4d05      	ldr	r5, [pc, #20]	; (8005ac8 <_lseek_r+0x20>)
 8005ab4:	602a      	str	r2, [r5, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f7fa fea1 	bl	80007fe <_lseek>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_lseek_r+0x1e>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_lseek_r+0x1e>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	20001c94 	.word	0x20001c94

08005acc <_read_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	4d05      	ldr	r5, [pc, #20]	; (8005aec <_read_r+0x20>)
 8005ad8:	602a      	str	r2, [r5, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f7fa fe32 	bl	8000744 <_read>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_read_r+0x1e>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_read_r+0x1e>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	20001c94 	.word	0x20001c94

08005af0 <_write_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	2200      	movs	r2, #0
 8005afa:	4d05      	ldr	r5, [pc, #20]	; (8005b10 <_write_r+0x20>)
 8005afc:	602a      	str	r2, [r5, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f7fa fe3d 	bl	800077e <_write>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d102      	bne.n	8005b0e <_write_r+0x1e>
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	b103      	cbz	r3, 8005b0e <_write_r+0x1e>
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	bd38      	pop	{r3, r4, r5, pc}
 8005b10:	20001c94 	.word	0x20001c94

08005b14 <__errno>:
 8005b14:	4b01      	ldr	r3, [pc, #4]	; (8005b1c <__errno+0x8>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000068 	.word	0x20000068

08005b20 <__libc_init_array>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	2600      	movs	r6, #0
 8005b24:	4d0c      	ldr	r5, [pc, #48]	; (8005b58 <__libc_init_array+0x38>)
 8005b26:	4c0d      	ldr	r4, [pc, #52]	; (8005b5c <__libc_init_array+0x3c>)
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	42a6      	cmp	r6, r4
 8005b2e:	d109      	bne.n	8005b44 <__libc_init_array+0x24>
 8005b30:	f000 fdd8 	bl	80066e4 <_init>
 8005b34:	2600      	movs	r6, #0
 8005b36:	4d0a      	ldr	r5, [pc, #40]	; (8005b60 <__libc_init_array+0x40>)
 8005b38:	4c0a      	ldr	r4, [pc, #40]	; (8005b64 <__libc_init_array+0x44>)
 8005b3a:	1b64      	subs	r4, r4, r5
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	42a6      	cmp	r6, r4
 8005b40:	d105      	bne.n	8005b4e <__libc_init_array+0x2e>
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b48:	4798      	blx	r3
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7ee      	b.n	8005b2c <__libc_init_array+0xc>
 8005b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b52:	4798      	blx	r3
 8005b54:	3601      	adds	r6, #1
 8005b56:	e7f2      	b.n	8005b3e <__libc_init_array+0x1e>
 8005b58:	08006834 	.word	0x08006834
 8005b5c:	08006834 	.word	0x08006834
 8005b60:	08006834 	.word	0x08006834
 8005b64:	08006838 	.word	0x08006838

08005b68 <__retarget_lock_init_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <__retarget_lock_acquire_recursive>:
 8005b6a:	4770      	bx	lr

08005b6c <__retarget_lock_release_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <memcpy>:
 8005b6e:	440a      	add	r2, r1
 8005b70:	4291      	cmp	r1, r2
 8005b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b76:	d100      	bne.n	8005b7a <memcpy+0xc>
 8005b78:	4770      	bx	lr
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b80:	4291      	cmp	r1, r2
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	d1f9      	bne.n	8005b7c <memcpy+0xe>
 8005b88:	bd10      	pop	{r4, pc}
	...

08005b8c <_free_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4605      	mov	r5, r0
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d040      	beq.n	8005c16 <_free_r+0x8a>
 8005b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b98:	1f0c      	subs	r4, r1, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bfb8      	it	lt
 8005b9e:	18e4      	addlt	r4, r4, r3
 8005ba0:	f000 f8dc 	bl	8005d5c <__malloc_lock>
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <_free_r+0x8c>)
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	b933      	cbnz	r3, 8005bb8 <_free_r+0x2c>
 8005baa:	6063      	str	r3, [r4, #4]
 8005bac:	6014      	str	r4, [r2, #0]
 8005bae:	4628      	mov	r0, r5
 8005bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb4:	f000 b8d8 	b.w	8005d68 <__malloc_unlock>
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d908      	bls.n	8005bce <_free_r+0x42>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	1821      	adds	r1, r4, r0
 8005bc0:	428b      	cmp	r3, r1
 8005bc2:	bf01      	itttt	eq
 8005bc4:	6819      	ldreq	r1, [r3, #0]
 8005bc6:	685b      	ldreq	r3, [r3, #4]
 8005bc8:	1809      	addeq	r1, r1, r0
 8005bca:	6021      	streq	r1, [r4, #0]
 8005bcc:	e7ed      	b.n	8005baa <_free_r+0x1e>
 8005bce:	461a      	mov	r2, r3
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b10b      	cbz	r3, 8005bd8 <_free_r+0x4c>
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	d9fa      	bls.n	8005bce <_free_r+0x42>
 8005bd8:	6811      	ldr	r1, [r2, #0]
 8005bda:	1850      	adds	r0, r2, r1
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d10b      	bne.n	8005bf8 <_free_r+0x6c>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	4401      	add	r1, r0
 8005be4:	1850      	adds	r0, r2, r1
 8005be6:	4283      	cmp	r3, r0
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	d1e0      	bne.n	8005bae <_free_r+0x22>
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4408      	add	r0, r1
 8005bf2:	6010      	str	r0, [r2, #0]
 8005bf4:	6053      	str	r3, [r2, #4]
 8005bf6:	e7da      	b.n	8005bae <_free_r+0x22>
 8005bf8:	d902      	bls.n	8005c00 <_free_r+0x74>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	e7d6      	b.n	8005bae <_free_r+0x22>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	1821      	adds	r1, r4, r0
 8005c04:	428b      	cmp	r3, r1
 8005c06:	bf01      	itttt	eq
 8005c08:	6819      	ldreq	r1, [r3, #0]
 8005c0a:	685b      	ldreq	r3, [r3, #4]
 8005c0c:	1809      	addeq	r1, r1, r0
 8005c0e:	6021      	streq	r1, [r4, #0]
 8005c10:	6063      	str	r3, [r4, #4]
 8005c12:	6054      	str	r4, [r2, #4]
 8005c14:	e7cb      	b.n	8005bae <_free_r+0x22>
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	20001c9c 	.word	0x20001c9c

08005c1c <sbrk_aligned>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4e0e      	ldr	r6, [pc, #56]	; (8005c58 <sbrk_aligned+0x3c>)
 8005c20:	460c      	mov	r4, r1
 8005c22:	6831      	ldr	r1, [r6, #0]
 8005c24:	4605      	mov	r5, r0
 8005c26:	b911      	cbnz	r1, 8005c2e <sbrk_aligned+0x12>
 8005c28:	f000 fcba 	bl	80065a0 <_sbrk_r>
 8005c2c:	6030      	str	r0, [r6, #0]
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f000 fcb5 	bl	80065a0 <_sbrk_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	d00a      	beq.n	8005c50 <sbrk_aligned+0x34>
 8005c3a:	1cc4      	adds	r4, r0, #3
 8005c3c:	f024 0403 	bic.w	r4, r4, #3
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d007      	beq.n	8005c54 <sbrk_aligned+0x38>
 8005c44:	1a21      	subs	r1, r4, r0
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fcaa 	bl	80065a0 <_sbrk_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d101      	bne.n	8005c54 <sbrk_aligned+0x38>
 8005c50:	f04f 34ff 	mov.w	r4, #4294967295
 8005c54:	4620      	mov	r0, r4
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
 8005c58:	20001ca0 	.word	0x20001ca0

08005c5c <_malloc_r>:
 8005c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c60:	1ccd      	adds	r5, r1, #3
 8005c62:	f025 0503 	bic.w	r5, r5, #3
 8005c66:	3508      	adds	r5, #8
 8005c68:	2d0c      	cmp	r5, #12
 8005c6a:	bf38      	it	cc
 8005c6c:	250c      	movcc	r5, #12
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	4607      	mov	r7, r0
 8005c72:	db01      	blt.n	8005c78 <_malloc_r+0x1c>
 8005c74:	42a9      	cmp	r1, r5
 8005c76:	d905      	bls.n	8005c84 <_malloc_r+0x28>
 8005c78:	230c      	movs	r3, #12
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d58 <_malloc_r+0xfc>
 8005c88:	f000 f868 	bl	8005d5c <__malloc_lock>
 8005c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c90:	461c      	mov	r4, r3
 8005c92:	bb5c      	cbnz	r4, 8005cec <_malloc_r+0x90>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4638      	mov	r0, r7
 8005c98:	f7ff ffc0 	bl	8005c1c <sbrk_aligned>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	d155      	bne.n	8005d4e <_malloc_r+0xf2>
 8005ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8005ca6:	4626      	mov	r6, r4
 8005ca8:	2e00      	cmp	r6, #0
 8005caa:	d145      	bne.n	8005d38 <_malloc_r+0xdc>
 8005cac:	2c00      	cmp	r4, #0
 8005cae:	d048      	beq.n	8005d42 <_malloc_r+0xe6>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	eb04 0903 	add.w	r9, r4, r3
 8005cba:	f000 fc71 	bl	80065a0 <_sbrk_r>
 8005cbe:	4581      	cmp	r9, r0
 8005cc0:	d13f      	bne.n	8005d42 <_malloc_r+0xe6>
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	1a6d      	subs	r5, r5, r1
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f7ff ffa7 	bl	8005c1c <sbrk_aligned>
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d037      	beq.n	8005d42 <_malloc_r+0xe6>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	442b      	add	r3, r5
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d038      	beq.n	8005d52 <_malloc_r+0xf6>
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	42a2      	cmp	r2, r4
 8005ce4:	d12b      	bne.n	8005d3e <_malloc_r+0xe2>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	e00f      	b.n	8005d0c <_malloc_r+0xb0>
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	1b52      	subs	r2, r2, r5
 8005cf0:	d41f      	bmi.n	8005d32 <_malloc_r+0xd6>
 8005cf2:	2a0b      	cmp	r2, #11
 8005cf4:	d917      	bls.n	8005d26 <_malloc_r+0xca>
 8005cf6:	1961      	adds	r1, r4, r5
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	6025      	str	r5, [r4, #0]
 8005cfc:	bf18      	it	ne
 8005cfe:	6059      	strne	r1, [r3, #4]
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	bf08      	it	eq
 8005d04:	f8c8 1000 	streq.w	r1, [r8]
 8005d08:	5162      	str	r2, [r4, r5]
 8005d0a:	604b      	str	r3, [r1, #4]
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f104 060b 	add.w	r6, r4, #11
 8005d12:	f000 f829 	bl	8005d68 <__malloc_unlock>
 8005d16:	f026 0607 	bic.w	r6, r6, #7
 8005d1a:	1d23      	adds	r3, r4, #4
 8005d1c:	1af2      	subs	r2, r6, r3
 8005d1e:	d0ae      	beq.n	8005c7e <_malloc_r+0x22>
 8005d20:	1b9b      	subs	r3, r3, r6
 8005d22:	50a3      	str	r3, [r4, r2]
 8005d24:	e7ab      	b.n	8005c7e <_malloc_r+0x22>
 8005d26:	42a3      	cmp	r3, r4
 8005d28:	6862      	ldr	r2, [r4, #4]
 8005d2a:	d1dd      	bne.n	8005ce8 <_malloc_r+0x8c>
 8005d2c:	f8c8 2000 	str.w	r2, [r8]
 8005d30:	e7ec      	b.n	8005d0c <_malloc_r+0xb0>
 8005d32:	4623      	mov	r3, r4
 8005d34:	6864      	ldr	r4, [r4, #4]
 8005d36:	e7ac      	b.n	8005c92 <_malloc_r+0x36>
 8005d38:	4634      	mov	r4, r6
 8005d3a:	6876      	ldr	r6, [r6, #4]
 8005d3c:	e7b4      	b.n	8005ca8 <_malloc_r+0x4c>
 8005d3e:	4613      	mov	r3, r2
 8005d40:	e7cc      	b.n	8005cdc <_malloc_r+0x80>
 8005d42:	230c      	movs	r3, #12
 8005d44:	4638      	mov	r0, r7
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	f000 f80e 	bl	8005d68 <__malloc_unlock>
 8005d4c:	e797      	b.n	8005c7e <_malloc_r+0x22>
 8005d4e:	6025      	str	r5, [r4, #0]
 8005d50:	e7dc      	b.n	8005d0c <_malloc_r+0xb0>
 8005d52:	605b      	str	r3, [r3, #4]
 8005d54:	deff      	udf	#255	; 0xff
 8005d56:	bf00      	nop
 8005d58:	20001c9c 	.word	0x20001c9c

08005d5c <__malloc_lock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	; (8005d64 <__malloc_lock+0x8>)
 8005d5e:	f7ff bf04 	b.w	8005b6a <__retarget_lock_acquire_recursive>
 8005d62:	bf00      	nop
 8005d64:	20001c98 	.word	0x20001c98

08005d68 <__malloc_unlock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	; (8005d70 <__malloc_unlock+0x8>)
 8005d6a:	f7ff beff 	b.w	8005b6c <__retarget_lock_release_recursive>
 8005d6e:	bf00      	nop
 8005d70:	20001c98 	.word	0x20001c98

08005d74 <__sfputc_r>:
 8005d74:	6893      	ldr	r3, [r2, #8]
 8005d76:	b410      	push	{r4}
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	6093      	str	r3, [r2, #8]
 8005d7e:	da07      	bge.n	8005d90 <__sfputc_r+0x1c>
 8005d80:	6994      	ldr	r4, [r2, #24]
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	db01      	blt.n	8005d8a <__sfputc_r+0x16>
 8005d86:	290a      	cmp	r1, #10
 8005d88:	d102      	bne.n	8005d90 <__sfputc_r+0x1c>
 8005d8a:	bc10      	pop	{r4}
 8005d8c:	f000 bb72 	b.w	8006474 <__swbuf_r>
 8005d90:	6813      	ldr	r3, [r2, #0]
 8005d92:	1c58      	adds	r0, r3, #1
 8005d94:	6010      	str	r0, [r2, #0]
 8005d96:	7019      	strb	r1, [r3, #0]
 8005d98:	4608      	mov	r0, r1
 8005d9a:	bc10      	pop	{r4}
 8005d9c:	4770      	bx	lr

08005d9e <__sfputs_r>:
 8005d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da0:	4606      	mov	r6, r0
 8005da2:	460f      	mov	r7, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	18d5      	adds	r5, r2, r3
 8005da8:	42ac      	cmp	r4, r5
 8005daa:	d101      	bne.n	8005db0 <__sfputs_r+0x12>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e007      	b.n	8005dc0 <__sfputs_r+0x22>
 8005db0:	463a      	mov	r2, r7
 8005db2:	4630      	mov	r0, r6
 8005db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db8:	f7ff ffdc 	bl	8005d74 <__sfputc_r>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d1f3      	bne.n	8005da8 <__sfputs_r+0xa>
 8005dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dc4 <_vfiprintf_r>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	460d      	mov	r5, r1
 8005dca:	4614      	mov	r4, r2
 8005dcc:	4698      	mov	r8, r3
 8005dce:	4606      	mov	r6, r0
 8005dd0:	b09d      	sub	sp, #116	; 0x74
 8005dd2:	b118      	cbz	r0, 8005ddc <_vfiprintf_r+0x18>
 8005dd4:	6a03      	ldr	r3, [r0, #32]
 8005dd6:	b90b      	cbnz	r3, 8005ddc <_vfiprintf_r+0x18>
 8005dd8:	f7ff fd6c 	bl	80058b4 <__sinit>
 8005ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dde:	07d9      	lsls	r1, r3, #31
 8005de0:	d405      	bmi.n	8005dee <_vfiprintf_r+0x2a>
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	059a      	lsls	r2, r3, #22
 8005de6:	d402      	bmi.n	8005dee <_vfiprintf_r+0x2a>
 8005de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dea:	f7ff febe 	bl	8005b6a <__retarget_lock_acquire_recursive>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	071b      	lsls	r3, r3, #28
 8005df2:	d501      	bpl.n	8005df8 <_vfiprintf_r+0x34>
 8005df4:	692b      	ldr	r3, [r5, #16]
 8005df6:	b99b      	cbnz	r3, 8005e20 <_vfiprintf_r+0x5c>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f000 fb78 	bl	80064f0 <__swsetup_r>
 8005e00:	b170      	cbz	r0, 8005e20 <_vfiprintf_r+0x5c>
 8005e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e04:	07dc      	lsls	r4, r3, #31
 8005e06:	d504      	bpl.n	8005e12 <_vfiprintf_r+0x4e>
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	b01d      	add	sp, #116	; 0x74
 8005e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	0598      	lsls	r0, r3, #22
 8005e16:	d4f7      	bmi.n	8005e08 <_vfiprintf_r+0x44>
 8005e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e1a:	f7ff fea7 	bl	8005b6c <__retarget_lock_release_recursive>
 8005e1e:	e7f3      	b.n	8005e08 <_vfiprintf_r+0x44>
 8005e20:	2300      	movs	r3, #0
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
 8005e24:	2320      	movs	r3, #32
 8005e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e2a:	2330      	movs	r3, #48	; 0x30
 8005e2c:	f04f 0901 	mov.w	r9, #1
 8005e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e34:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005fe4 <_vfiprintf_r+0x220>
 8005e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e3c:	4623      	mov	r3, r4
 8005e3e:	469a      	mov	sl, r3
 8005e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e44:	b10a      	cbz	r2, 8005e4a <_vfiprintf_r+0x86>
 8005e46:	2a25      	cmp	r2, #37	; 0x25
 8005e48:	d1f9      	bne.n	8005e3e <_vfiprintf_r+0x7a>
 8005e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e4e:	d00b      	beq.n	8005e68 <_vfiprintf_r+0xa4>
 8005e50:	465b      	mov	r3, fp
 8005e52:	4622      	mov	r2, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ffa1 	bl	8005d9e <__sfputs_r>
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f000 80a9 	beq.w	8005fb4 <_vfiprintf_r+0x1f0>
 8005e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e64:	445a      	add	r2, fp
 8005e66:	9209      	str	r2, [sp, #36]	; 0x24
 8005e68:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80a1 	beq.w	8005fb4 <_vfiprintf_r+0x1f0>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f04f 32ff 	mov.w	r2, #4294967295
 8005e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e7c:	f10a 0a01 	add.w	sl, sl, #1
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	9307      	str	r3, [sp, #28]
 8005e84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e88:	931a      	str	r3, [sp, #104]	; 0x68
 8005e8a:	4654      	mov	r4, sl
 8005e8c:	2205      	movs	r2, #5
 8005e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e92:	4854      	ldr	r0, [pc, #336]	; (8005fe4 <_vfiprintf_r+0x220>)
 8005e94:	f000 fb94 	bl	80065c0 <memchr>
 8005e98:	9a04      	ldr	r2, [sp, #16]
 8005e9a:	b9d8      	cbnz	r0, 8005ed4 <_vfiprintf_r+0x110>
 8005e9c:	06d1      	lsls	r1, r2, #27
 8005e9e:	bf44      	itt	mi
 8005ea0:	2320      	movmi	r3, #32
 8005ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea6:	0713      	lsls	r3, r2, #28
 8005ea8:	bf44      	itt	mi
 8005eaa:	232b      	movmi	r3, #43	; 0x2b
 8005eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb6:	d015      	beq.n	8005ee4 <_vfiprintf_r+0x120>
 8005eb8:	4654      	mov	r4, sl
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f04f 0c0a 	mov.w	ip, #10
 8005ec0:	9a07      	ldr	r2, [sp, #28]
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec8:	3b30      	subs	r3, #48	; 0x30
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d94d      	bls.n	8005f6a <_vfiprintf_r+0x1a6>
 8005ece:	b1b0      	cbz	r0, 8005efe <_vfiprintf_r+0x13a>
 8005ed0:	9207      	str	r2, [sp, #28]
 8005ed2:	e014      	b.n	8005efe <_vfiprintf_r+0x13a>
 8005ed4:	eba0 0308 	sub.w	r3, r0, r8
 8005ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8005edc:	4313      	orrs	r3, r2
 8005ede:	46a2      	mov	sl, r4
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	e7d2      	b.n	8005e8a <_vfiprintf_r+0xc6>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	1d19      	adds	r1, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	9103      	str	r1, [sp, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfbb      	ittet	lt
 8005ef0:	425b      	neglt	r3, r3
 8005ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef6:	9307      	strge	r3, [sp, #28]
 8005ef8:	9307      	strlt	r3, [sp, #28]
 8005efa:	bfb8      	it	lt
 8005efc:	9204      	strlt	r2, [sp, #16]
 8005efe:	7823      	ldrb	r3, [r4, #0]
 8005f00:	2b2e      	cmp	r3, #46	; 0x2e
 8005f02:	d10c      	bne.n	8005f1e <_vfiprintf_r+0x15a>
 8005f04:	7863      	ldrb	r3, [r4, #1]
 8005f06:	2b2a      	cmp	r3, #42	; 0x2a
 8005f08:	d134      	bne.n	8005f74 <_vfiprintf_r+0x1b0>
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	3402      	adds	r4, #2
 8005f0e:	1d1a      	adds	r2, r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	9203      	str	r2, [sp, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfb8      	it	lt
 8005f18:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f1c:	9305      	str	r3, [sp, #20]
 8005f1e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fe8 <_vfiprintf_r+0x224>
 8005f22:	2203      	movs	r2, #3
 8005f24:	4650      	mov	r0, sl
 8005f26:	7821      	ldrb	r1, [r4, #0]
 8005f28:	f000 fb4a 	bl	80065c0 <memchr>
 8005f2c:	b138      	cbz	r0, 8005f3e <_vfiprintf_r+0x17a>
 8005f2e:	2240      	movs	r2, #64	; 0x40
 8005f30:	9b04      	ldr	r3, [sp, #16]
 8005f32:	eba0 000a 	sub.w	r0, r0, sl
 8005f36:	4082      	lsls	r2, r0
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	3401      	adds	r4, #1
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f42:	2206      	movs	r2, #6
 8005f44:	4829      	ldr	r0, [pc, #164]	; (8005fec <_vfiprintf_r+0x228>)
 8005f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f4a:	f000 fb39 	bl	80065c0 <memchr>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d03f      	beq.n	8005fd2 <_vfiprintf_r+0x20e>
 8005f52:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <_vfiprintf_r+0x22c>)
 8005f54:	bb1b      	cbnz	r3, 8005f9e <_vfiprintf_r+0x1da>
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	3307      	adds	r3, #7
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	3308      	adds	r3, #8
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	443b      	add	r3, r7
 8005f66:	9309      	str	r3, [sp, #36]	; 0x24
 8005f68:	e768      	b.n	8005e3c <_vfiprintf_r+0x78>
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f72:	e7a6      	b.n	8005ec2 <_vfiprintf_r+0xfe>
 8005f74:	2300      	movs	r3, #0
 8005f76:	f04f 0c0a 	mov.w	ip, #10
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	3401      	adds	r4, #1
 8005f7e:	9305      	str	r3, [sp, #20]
 8005f80:	4620      	mov	r0, r4
 8005f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f86:	3a30      	subs	r2, #48	; 0x30
 8005f88:	2a09      	cmp	r2, #9
 8005f8a:	d903      	bls.n	8005f94 <_vfiprintf_r+0x1d0>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0c6      	beq.n	8005f1e <_vfiprintf_r+0x15a>
 8005f90:	9105      	str	r1, [sp, #20]
 8005f92:	e7c4      	b.n	8005f1e <_vfiprintf_r+0x15a>
 8005f94:	4604      	mov	r4, r0
 8005f96:	2301      	movs	r3, #1
 8005f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f9c:	e7f0      	b.n	8005f80 <_vfiprintf_r+0x1bc>
 8005f9e:	ab03      	add	r3, sp, #12
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	462a      	mov	r2, r5
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <_vfiprintf_r+0x230>)
 8005fa8:	a904      	add	r1, sp, #16
 8005faa:	f3af 8000 	nop.w
 8005fae:	4607      	mov	r7, r0
 8005fb0:	1c78      	adds	r0, r7, #1
 8005fb2:	d1d6      	bne.n	8005f62 <_vfiprintf_r+0x19e>
 8005fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fb6:	07d9      	lsls	r1, r3, #31
 8005fb8:	d405      	bmi.n	8005fc6 <_vfiprintf_r+0x202>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	059a      	lsls	r2, r3, #22
 8005fbe:	d402      	bmi.n	8005fc6 <_vfiprintf_r+0x202>
 8005fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fc2:	f7ff fdd3 	bl	8005b6c <__retarget_lock_release_recursive>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	065b      	lsls	r3, r3, #25
 8005fca:	f53f af1d 	bmi.w	8005e08 <_vfiprintf_r+0x44>
 8005fce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fd0:	e71c      	b.n	8005e0c <_vfiprintf_r+0x48>
 8005fd2:	ab03      	add	r3, sp, #12
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <_vfiprintf_r+0x230>)
 8005fdc:	a904      	add	r1, sp, #16
 8005fde:	f000 f87d 	bl	80060dc <_printf_i>
 8005fe2:	e7e4      	b.n	8005fae <_vfiprintf_r+0x1ea>
 8005fe4:	080067fe 	.word	0x080067fe
 8005fe8:	08006804 	.word	0x08006804
 8005fec:	08006808 	.word	0x08006808
 8005ff0:	00000000 	.word	0x00000000
 8005ff4:	08005d9f 	.word	0x08005d9f

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4699      	mov	r9, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	4607      	mov	r7, r0
 8006006:	4293      	cmp	r3, r2
 8006008:	bfb8      	it	lt
 800600a:	4613      	movlt	r3, r2
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006012:	460c      	mov	r4, r1
 8006014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc2b      	bgt.n	8006098 <_printf_common+0xa0>
 8006040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006044:	1e13      	subs	r3, r2, #0
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d430      	bmi.n	80060b2 <_printf_common+0xba>
 8006050:	4649      	mov	r1, r9
 8006052:	4638      	mov	r0, r7
 8006054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006058:	47c0      	blx	r8
 800605a:	3001      	adds	r0, #1
 800605c:	d023      	beq.n	80060a6 <_printf_common+0xae>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf14      	ite	ne
 800606a:	2500      	movne	r5, #0
 800606c:	6833      	ldreq	r3, [r6, #0]
 800606e:	f04f 0600 	mov.w	r6, #0
 8006072:	bf08      	it	eq
 8006074:	68e5      	ldreq	r5, [r4, #12]
 8006076:	f104 041a 	add.w	r4, r4, #26
 800607a:	bf08      	it	eq
 800607c:	1aed      	subeq	r5, r5, r3
 800607e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006082:	bf08      	it	eq
 8006084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006088:	4293      	cmp	r3, r2
 800608a:	bfc4      	itt	gt
 800608c:	1a9b      	subgt	r3, r3, r2
 800608e:	18ed      	addgt	r5, r5, r3
 8006090:	42b5      	cmp	r5, r6
 8006092:	d11a      	bne.n	80060ca <_printf_common+0xd2>
 8006094:	2000      	movs	r0, #0
 8006096:	e008      	b.n	80060aa <_printf_common+0xb2>
 8006098:	2301      	movs	r3, #1
 800609a:	4652      	mov	r2, sl
 800609c:	4649      	mov	r1, r9
 800609e:	4638      	mov	r0, r7
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d103      	bne.n	80060ae <_printf_common+0xb6>
 80060a6:	f04f 30ff 	mov.w	r0, #4294967295
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	3501      	adds	r5, #1
 80060b0:	e7c1      	b.n	8006036 <_printf_common+0x3e>
 80060b2:	2030      	movs	r0, #48	; 0x30
 80060b4:	18e1      	adds	r1, r4, r3
 80060b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060c0:	4422      	add	r2, r4
 80060c2:	3302      	adds	r3, #2
 80060c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c8:	e7c2      	b.n	8006050 <_printf_common+0x58>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4622      	mov	r2, r4
 80060ce:	4649      	mov	r1, r9
 80060d0:	4638      	mov	r0, r7
 80060d2:	47c0      	blx	r8
 80060d4:	3001      	adds	r0, #1
 80060d6:	d0e6      	beq.n	80060a6 <_printf_common+0xae>
 80060d8:	3601      	adds	r6, #1
 80060da:	e7d9      	b.n	8006090 <_printf_common+0x98>

080060dc <_printf_i>:
 80060dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	7e0f      	ldrb	r7, [r1, #24]
 80060e2:	4691      	mov	r9, r2
 80060e4:	2f78      	cmp	r7, #120	; 0x78
 80060e6:	4680      	mov	r8, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	469a      	mov	sl, r3
 80060ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060f2:	d807      	bhi.n	8006104 <_printf_i+0x28>
 80060f4:	2f62      	cmp	r7, #98	; 0x62
 80060f6:	d80a      	bhi.n	800610e <_printf_i+0x32>
 80060f8:	2f00      	cmp	r7, #0
 80060fa:	f000 80d5 	beq.w	80062a8 <_printf_i+0x1cc>
 80060fe:	2f58      	cmp	r7, #88	; 0x58
 8006100:	f000 80c1 	beq.w	8006286 <_printf_i+0x1aa>
 8006104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800610c:	e03a      	b.n	8006184 <_printf_i+0xa8>
 800610e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006112:	2b15      	cmp	r3, #21
 8006114:	d8f6      	bhi.n	8006104 <_printf_i+0x28>
 8006116:	a101      	add	r1, pc, #4	; (adr r1, 800611c <_printf_i+0x40>)
 8006118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800611c:	08006175 	.word	0x08006175
 8006120:	08006189 	.word	0x08006189
 8006124:	08006105 	.word	0x08006105
 8006128:	08006105 	.word	0x08006105
 800612c:	08006105 	.word	0x08006105
 8006130:	08006105 	.word	0x08006105
 8006134:	08006189 	.word	0x08006189
 8006138:	08006105 	.word	0x08006105
 800613c:	08006105 	.word	0x08006105
 8006140:	08006105 	.word	0x08006105
 8006144:	08006105 	.word	0x08006105
 8006148:	0800628f 	.word	0x0800628f
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006249 	.word	0x08006249
 8006154:	08006105 	.word	0x08006105
 8006158:	08006105 	.word	0x08006105
 800615c:	080062b1 	.word	0x080062b1
 8006160:	08006105 	.word	0x08006105
 8006164:	080061b5 	.word	0x080061b5
 8006168:	08006105 	.word	0x08006105
 800616c:	08006105 	.word	0x08006105
 8006170:	08006251 	.word	0x08006251
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	602a      	str	r2, [r5, #0]
 800617c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006184:	2301      	movs	r3, #1
 8006186:	e0a0      	b.n	80062ca <_printf_i+0x1ee>
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	0607      	lsls	r7, r0, #24
 800618e:	f103 0104 	add.w	r1, r3, #4
 8006192:	6029      	str	r1, [r5, #0]
 8006194:	d501      	bpl.n	800619a <_printf_i+0xbe>
 8006196:	681e      	ldr	r6, [r3, #0]
 8006198:	e003      	b.n	80061a2 <_printf_i+0xc6>
 800619a:	0646      	lsls	r6, r0, #25
 800619c:	d5fb      	bpl.n	8006196 <_printf_i+0xba>
 800619e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	da03      	bge.n	80061ae <_printf_i+0xd2>
 80061a6:	232d      	movs	r3, #45	; 0x2d
 80061a8:	4276      	negs	r6, r6
 80061aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ae:	230a      	movs	r3, #10
 80061b0:	4859      	ldr	r0, [pc, #356]	; (8006318 <_printf_i+0x23c>)
 80061b2:	e012      	b.n	80061da <_printf_i+0xfe>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	1d19      	adds	r1, r3, #4
 80061ba:	6029      	str	r1, [r5, #0]
 80061bc:	0605      	lsls	r5, r0, #24
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0xe8>
 80061c0:	681e      	ldr	r6, [r3, #0]
 80061c2:	e002      	b.n	80061ca <_printf_i+0xee>
 80061c4:	0641      	lsls	r1, r0, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0xe4>
 80061c8:	881e      	ldrh	r6, [r3, #0]
 80061ca:	2f6f      	cmp	r7, #111	; 0x6f
 80061cc:	bf0c      	ite	eq
 80061ce:	2308      	moveq	r3, #8
 80061d0:	230a      	movne	r3, #10
 80061d2:	4851      	ldr	r0, [pc, #324]	; (8006318 <_printf_i+0x23c>)
 80061d4:	2100      	movs	r1, #0
 80061d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061da:	6865      	ldr	r5, [r4, #4]
 80061dc:	2d00      	cmp	r5, #0
 80061de:	bfa8      	it	ge
 80061e0:	6821      	ldrge	r1, [r4, #0]
 80061e2:	60a5      	str	r5, [r4, #8]
 80061e4:	bfa4      	itt	ge
 80061e6:	f021 0104 	bicge.w	r1, r1, #4
 80061ea:	6021      	strge	r1, [r4, #0]
 80061ec:	b90e      	cbnz	r6, 80061f2 <_printf_i+0x116>
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	d04b      	beq.n	800628a <_printf_i+0x1ae>
 80061f2:	4615      	mov	r5, r2
 80061f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80061f8:	fb03 6711 	mls	r7, r3, r1, r6
 80061fc:	5dc7      	ldrb	r7, [r0, r7]
 80061fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006202:	4637      	mov	r7, r6
 8006204:	42bb      	cmp	r3, r7
 8006206:	460e      	mov	r6, r1
 8006208:	d9f4      	bls.n	80061f4 <_printf_i+0x118>
 800620a:	2b08      	cmp	r3, #8
 800620c:	d10b      	bne.n	8006226 <_printf_i+0x14a>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	07de      	lsls	r6, r3, #31
 8006212:	d508      	bpl.n	8006226 <_printf_i+0x14a>
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	6861      	ldr	r1, [r4, #4]
 8006218:	4299      	cmp	r1, r3
 800621a:	bfde      	ittt	le
 800621c:	2330      	movle	r3, #48	; 0x30
 800621e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006222:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006226:	1b52      	subs	r2, r2, r5
 8006228:	6122      	str	r2, [r4, #16]
 800622a:	464b      	mov	r3, r9
 800622c:	4621      	mov	r1, r4
 800622e:	4640      	mov	r0, r8
 8006230:	f8cd a000 	str.w	sl, [sp]
 8006234:	aa03      	add	r2, sp, #12
 8006236:	f7ff fedf 	bl	8005ff8 <_printf_common>
 800623a:	3001      	adds	r0, #1
 800623c:	d14a      	bne.n	80062d4 <_printf_i+0x1f8>
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	b004      	add	sp, #16
 8006244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	f043 0320 	orr.w	r3, r3, #32
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	2778      	movs	r7, #120	; 0x78
 8006252:	4832      	ldr	r0, [pc, #200]	; (800631c <_printf_i+0x240>)
 8006254:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	6829      	ldr	r1, [r5, #0]
 800625c:	061f      	lsls	r7, r3, #24
 800625e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006262:	d402      	bmi.n	800626a <_printf_i+0x18e>
 8006264:	065f      	lsls	r7, r3, #25
 8006266:	bf48      	it	mi
 8006268:	b2b6      	uxthmi	r6, r6
 800626a:	07df      	lsls	r7, r3, #31
 800626c:	bf48      	it	mi
 800626e:	f043 0320 	orrmi.w	r3, r3, #32
 8006272:	6029      	str	r1, [r5, #0]
 8006274:	bf48      	it	mi
 8006276:	6023      	strmi	r3, [r4, #0]
 8006278:	b91e      	cbnz	r6, 8006282 <_printf_i+0x1a6>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f023 0320 	bic.w	r3, r3, #32
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	2310      	movs	r3, #16
 8006284:	e7a6      	b.n	80061d4 <_printf_i+0xf8>
 8006286:	4824      	ldr	r0, [pc, #144]	; (8006318 <_printf_i+0x23c>)
 8006288:	e7e4      	b.n	8006254 <_printf_i+0x178>
 800628a:	4615      	mov	r5, r2
 800628c:	e7bd      	b.n	800620a <_printf_i+0x12e>
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	6826      	ldr	r6, [r4, #0]
 8006292:	1d18      	adds	r0, r3, #4
 8006294:	6961      	ldr	r1, [r4, #20]
 8006296:	6028      	str	r0, [r5, #0]
 8006298:	0635      	lsls	r5, r6, #24
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	d501      	bpl.n	80062a2 <_printf_i+0x1c6>
 800629e:	6019      	str	r1, [r3, #0]
 80062a0:	e002      	b.n	80062a8 <_printf_i+0x1cc>
 80062a2:	0670      	lsls	r0, r6, #25
 80062a4:	d5fb      	bpl.n	800629e <_printf_i+0x1c2>
 80062a6:	8019      	strh	r1, [r3, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	4615      	mov	r5, r2
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	e7bc      	b.n	800622a <_printf_i+0x14e>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	2100      	movs	r1, #0
 80062b4:	1d1a      	adds	r2, r3, #4
 80062b6:	602a      	str	r2, [r5, #0]
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 f97f 	bl	80065c0 <memchr>
 80062c2:	b108      	cbz	r0, 80062c8 <_printf_i+0x1ec>
 80062c4:	1b40      	subs	r0, r0, r5
 80062c6:	6060      	str	r0, [r4, #4]
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	2300      	movs	r3, #0
 80062ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d2:	e7aa      	b.n	800622a <_printf_i+0x14e>
 80062d4:	462a      	mov	r2, r5
 80062d6:	4649      	mov	r1, r9
 80062d8:	4640      	mov	r0, r8
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	47d0      	blx	sl
 80062de:	3001      	adds	r0, #1
 80062e0:	d0ad      	beq.n	800623e <_printf_i+0x162>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	079b      	lsls	r3, r3, #30
 80062e6:	d413      	bmi.n	8006310 <_printf_i+0x234>
 80062e8:	68e0      	ldr	r0, [r4, #12]
 80062ea:	9b03      	ldr	r3, [sp, #12]
 80062ec:	4298      	cmp	r0, r3
 80062ee:	bfb8      	it	lt
 80062f0:	4618      	movlt	r0, r3
 80062f2:	e7a6      	b.n	8006242 <_printf_i+0x166>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4632      	mov	r2, r6
 80062f8:	4649      	mov	r1, r9
 80062fa:	4640      	mov	r0, r8
 80062fc:	47d0      	blx	sl
 80062fe:	3001      	adds	r0, #1
 8006300:	d09d      	beq.n	800623e <_printf_i+0x162>
 8006302:	3501      	adds	r5, #1
 8006304:	68e3      	ldr	r3, [r4, #12]
 8006306:	9903      	ldr	r1, [sp, #12]
 8006308:	1a5b      	subs	r3, r3, r1
 800630a:	42ab      	cmp	r3, r5
 800630c:	dcf2      	bgt.n	80062f4 <_printf_i+0x218>
 800630e:	e7eb      	b.n	80062e8 <_printf_i+0x20c>
 8006310:	2500      	movs	r5, #0
 8006312:	f104 0619 	add.w	r6, r4, #25
 8006316:	e7f5      	b.n	8006304 <_printf_i+0x228>
 8006318:	0800680f 	.word	0x0800680f
 800631c:	08006820 	.word	0x08006820

08006320 <__sflush_r>:
 8006320:	898a      	ldrh	r2, [r1, #12]
 8006322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006324:	4605      	mov	r5, r0
 8006326:	0710      	lsls	r0, r2, #28
 8006328:	460c      	mov	r4, r1
 800632a:	d457      	bmi.n	80063dc <__sflush_r+0xbc>
 800632c:	684b      	ldr	r3, [r1, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dc04      	bgt.n	800633c <__sflush_r+0x1c>
 8006332:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	dc01      	bgt.n	800633c <__sflush_r+0x1c>
 8006338:	2000      	movs	r0, #0
 800633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800633e:	2e00      	cmp	r6, #0
 8006340:	d0fa      	beq.n	8006338 <__sflush_r+0x18>
 8006342:	2300      	movs	r3, #0
 8006344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006348:	682f      	ldr	r7, [r5, #0]
 800634a:	6a21      	ldr	r1, [r4, #32]
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	d032      	beq.n	80063b6 <__sflush_r+0x96>
 8006350:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	075a      	lsls	r2, r3, #29
 8006356:	d505      	bpl.n	8006364 <__sflush_r+0x44>
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800635e:	b10b      	cbz	r3, 8006364 <__sflush_r+0x44>
 8006360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006362:	1ac0      	subs	r0, r0, r3
 8006364:	2300      	movs	r3, #0
 8006366:	4602      	mov	r2, r0
 8006368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800636a:	4628      	mov	r0, r5
 800636c:	6a21      	ldr	r1, [r4, #32]
 800636e:	47b0      	blx	r6
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	d106      	bne.n	8006384 <__sflush_r+0x64>
 8006376:	6829      	ldr	r1, [r5, #0]
 8006378:	291d      	cmp	r1, #29
 800637a:	d82b      	bhi.n	80063d4 <__sflush_r+0xb4>
 800637c:	4a28      	ldr	r2, [pc, #160]	; (8006420 <__sflush_r+0x100>)
 800637e:	410a      	asrs	r2, r1
 8006380:	07d6      	lsls	r6, r2, #31
 8006382:	d427      	bmi.n	80063d4 <__sflush_r+0xb4>
 8006384:	2200      	movs	r2, #0
 8006386:	6062      	str	r2, [r4, #4]
 8006388:	6922      	ldr	r2, [r4, #16]
 800638a:	04d9      	lsls	r1, r3, #19
 800638c:	6022      	str	r2, [r4, #0]
 800638e:	d504      	bpl.n	800639a <__sflush_r+0x7a>
 8006390:	1c42      	adds	r2, r0, #1
 8006392:	d101      	bne.n	8006398 <__sflush_r+0x78>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b903      	cbnz	r3, 800639a <__sflush_r+0x7a>
 8006398:	6560      	str	r0, [r4, #84]	; 0x54
 800639a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800639c:	602f      	str	r7, [r5, #0]
 800639e:	2900      	cmp	r1, #0
 80063a0:	d0ca      	beq.n	8006338 <__sflush_r+0x18>
 80063a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063a6:	4299      	cmp	r1, r3
 80063a8:	d002      	beq.n	80063b0 <__sflush_r+0x90>
 80063aa:	4628      	mov	r0, r5
 80063ac:	f7ff fbee 	bl	8005b8c <_free_r>
 80063b0:	2000      	movs	r0, #0
 80063b2:	6360      	str	r0, [r4, #52]	; 0x34
 80063b4:	e7c1      	b.n	800633a <__sflush_r+0x1a>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b0      	blx	r6
 80063bc:	1c41      	adds	r1, r0, #1
 80063be:	d1c8      	bne.n	8006352 <__sflush_r+0x32>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0c5      	beq.n	8006352 <__sflush_r+0x32>
 80063c6:	2b1d      	cmp	r3, #29
 80063c8:	d001      	beq.n	80063ce <__sflush_r+0xae>
 80063ca:	2b16      	cmp	r3, #22
 80063cc:	d101      	bne.n	80063d2 <__sflush_r+0xb2>
 80063ce:	602f      	str	r7, [r5, #0]
 80063d0:	e7b2      	b.n	8006338 <__sflush_r+0x18>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	e7ae      	b.n	800633a <__sflush_r+0x1a>
 80063dc:	690f      	ldr	r7, [r1, #16]
 80063de:	2f00      	cmp	r7, #0
 80063e0:	d0aa      	beq.n	8006338 <__sflush_r+0x18>
 80063e2:	0793      	lsls	r3, r2, #30
 80063e4:	bf18      	it	ne
 80063e6:	2300      	movne	r3, #0
 80063e8:	680e      	ldr	r6, [r1, #0]
 80063ea:	bf08      	it	eq
 80063ec:	694b      	ldreq	r3, [r1, #20]
 80063ee:	1bf6      	subs	r6, r6, r7
 80063f0:	600f      	str	r7, [r1, #0]
 80063f2:	608b      	str	r3, [r1, #8]
 80063f4:	2e00      	cmp	r6, #0
 80063f6:	dd9f      	ble.n	8006338 <__sflush_r+0x18>
 80063f8:	4633      	mov	r3, r6
 80063fa:	463a      	mov	r2, r7
 80063fc:	4628      	mov	r0, r5
 80063fe:	6a21      	ldr	r1, [r4, #32]
 8006400:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006404:	47e0      	blx	ip
 8006406:	2800      	cmp	r0, #0
 8006408:	dc06      	bgt.n	8006418 <__sflush_r+0xf8>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	e790      	b.n	800633a <__sflush_r+0x1a>
 8006418:	4407      	add	r7, r0
 800641a:	1a36      	subs	r6, r6, r0
 800641c:	e7ea      	b.n	80063f4 <__sflush_r+0xd4>
 800641e:	bf00      	nop
 8006420:	dfbffffe 	.word	0xdfbffffe

08006424 <_fflush_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	690b      	ldr	r3, [r1, #16]
 8006428:	4605      	mov	r5, r0
 800642a:	460c      	mov	r4, r1
 800642c:	b913      	cbnz	r3, 8006434 <_fflush_r+0x10>
 800642e:	2500      	movs	r5, #0
 8006430:	4628      	mov	r0, r5
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	b118      	cbz	r0, 800643e <_fflush_r+0x1a>
 8006436:	6a03      	ldr	r3, [r0, #32]
 8006438:	b90b      	cbnz	r3, 800643e <_fflush_r+0x1a>
 800643a:	f7ff fa3b 	bl	80058b4 <__sinit>
 800643e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0f3      	beq.n	800642e <_fflush_r+0xa>
 8006446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006448:	07d0      	lsls	r0, r2, #31
 800644a:	d404      	bmi.n	8006456 <_fflush_r+0x32>
 800644c:	0599      	lsls	r1, r3, #22
 800644e:	d402      	bmi.n	8006456 <_fflush_r+0x32>
 8006450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006452:	f7ff fb8a 	bl	8005b6a <__retarget_lock_acquire_recursive>
 8006456:	4628      	mov	r0, r5
 8006458:	4621      	mov	r1, r4
 800645a:	f7ff ff61 	bl	8006320 <__sflush_r>
 800645e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006460:	4605      	mov	r5, r0
 8006462:	07da      	lsls	r2, r3, #31
 8006464:	d4e4      	bmi.n	8006430 <_fflush_r+0xc>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	059b      	lsls	r3, r3, #22
 800646a:	d4e1      	bmi.n	8006430 <_fflush_r+0xc>
 800646c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646e:	f7ff fb7d 	bl	8005b6c <__retarget_lock_release_recursive>
 8006472:	e7dd      	b.n	8006430 <_fflush_r+0xc>

08006474 <__swbuf_r>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	460e      	mov	r6, r1
 8006478:	4614      	mov	r4, r2
 800647a:	4605      	mov	r5, r0
 800647c:	b118      	cbz	r0, 8006486 <__swbuf_r+0x12>
 800647e:	6a03      	ldr	r3, [r0, #32]
 8006480:	b90b      	cbnz	r3, 8006486 <__swbuf_r+0x12>
 8006482:	f7ff fa17 	bl	80058b4 <__sinit>
 8006486:	69a3      	ldr	r3, [r4, #24]
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	071a      	lsls	r2, r3, #28
 800648e:	d525      	bpl.n	80064dc <__swbuf_r+0x68>
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	b31b      	cbz	r3, 80064dc <__swbuf_r+0x68>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	6922      	ldr	r2, [r4, #16]
 8006498:	b2f6      	uxtb	r6, r6
 800649a:	1a98      	subs	r0, r3, r2
 800649c:	6963      	ldr	r3, [r4, #20]
 800649e:	4637      	mov	r7, r6
 80064a0:	4283      	cmp	r3, r0
 80064a2:	dc04      	bgt.n	80064ae <__swbuf_r+0x3a>
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff ffbc 	bl	8006424 <_fflush_r>
 80064ac:	b9e0      	cbnz	r0, 80064e8 <__swbuf_r+0x74>
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	60a3      	str	r3, [r4, #8]
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	701e      	strb	r6, [r3, #0]
 80064bc:	6962      	ldr	r2, [r4, #20]
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d004      	beq.n	80064ce <__swbuf_r+0x5a>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	07db      	lsls	r3, r3, #31
 80064c8:	d506      	bpl.n	80064d8 <__swbuf_r+0x64>
 80064ca:	2e0a      	cmp	r6, #10
 80064cc:	d104      	bne.n	80064d8 <__swbuf_r+0x64>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f7ff ffa7 	bl	8006424 <_fflush_r>
 80064d6:	b938      	cbnz	r0, 80064e8 <__swbuf_r+0x74>
 80064d8:	4638      	mov	r0, r7
 80064da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064dc:	4621      	mov	r1, r4
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f806 	bl	80064f0 <__swsetup_r>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d0d5      	beq.n	8006494 <__swbuf_r+0x20>
 80064e8:	f04f 37ff 	mov.w	r7, #4294967295
 80064ec:	e7f4      	b.n	80064d8 <__swbuf_r+0x64>
	...

080064f0 <__swsetup_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <__swsetup_r+0xac>)
 80064f4:	4605      	mov	r5, r0
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	460c      	mov	r4, r1
 80064fa:	b118      	cbz	r0, 8006504 <__swsetup_r+0x14>
 80064fc:	6a03      	ldr	r3, [r0, #32]
 80064fe:	b90b      	cbnz	r3, 8006504 <__swsetup_r+0x14>
 8006500:	f7ff f9d8 	bl	80058b4 <__sinit>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800650a:	0718      	lsls	r0, r3, #28
 800650c:	d422      	bmi.n	8006554 <__swsetup_r+0x64>
 800650e:	06d9      	lsls	r1, r3, #27
 8006510:	d407      	bmi.n	8006522 <__swsetup_r+0x32>
 8006512:	2309      	movs	r3, #9
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800651a:	f04f 30ff 	mov.w	r0, #4294967295
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	e034      	b.n	800658c <__swsetup_r+0x9c>
 8006522:	0758      	lsls	r0, r3, #29
 8006524:	d512      	bpl.n	800654c <__swsetup_r+0x5c>
 8006526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006528:	b141      	cbz	r1, 800653c <__swsetup_r+0x4c>
 800652a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800652e:	4299      	cmp	r1, r3
 8006530:	d002      	beq.n	8006538 <__swsetup_r+0x48>
 8006532:	4628      	mov	r0, r5
 8006534:	f7ff fb2a 	bl	8005b8c <_free_r>
 8006538:	2300      	movs	r3, #0
 800653a:	6363      	str	r3, [r4, #52]	; 0x34
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	2300      	movs	r3, #0
 8006546:	6063      	str	r3, [r4, #4]
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f043 0308 	orr.w	r3, r3, #8
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	6923      	ldr	r3, [r4, #16]
 8006556:	b94b      	cbnz	r3, 800656c <__swsetup_r+0x7c>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800655e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006562:	d003      	beq.n	800656c <__swsetup_r+0x7c>
 8006564:	4621      	mov	r1, r4
 8006566:	4628      	mov	r0, r5
 8006568:	f000 f85d 	bl	8006626 <__smakebuf_r>
 800656c:	89a0      	ldrh	r0, [r4, #12]
 800656e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006572:	f010 0301 	ands.w	r3, r0, #1
 8006576:	d00a      	beq.n	800658e <__swsetup_r+0x9e>
 8006578:	2300      	movs	r3, #0
 800657a:	60a3      	str	r3, [r4, #8]
 800657c:	6963      	ldr	r3, [r4, #20]
 800657e:	425b      	negs	r3, r3
 8006580:	61a3      	str	r3, [r4, #24]
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	b943      	cbnz	r3, 8006598 <__swsetup_r+0xa8>
 8006586:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800658a:	d1c4      	bne.n	8006516 <__swsetup_r+0x26>
 800658c:	bd38      	pop	{r3, r4, r5, pc}
 800658e:	0781      	lsls	r1, r0, #30
 8006590:	bf58      	it	pl
 8006592:	6963      	ldrpl	r3, [r4, #20]
 8006594:	60a3      	str	r3, [r4, #8]
 8006596:	e7f4      	b.n	8006582 <__swsetup_r+0x92>
 8006598:	2000      	movs	r0, #0
 800659a:	e7f7      	b.n	800658c <__swsetup_r+0x9c>
 800659c:	20000068 	.word	0x20000068

080065a0 <_sbrk_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	2300      	movs	r3, #0
 80065a4:	4d05      	ldr	r5, [pc, #20]	; (80065bc <_sbrk_r+0x1c>)
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fa f934 	bl	8000818 <_sbrk>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_sbrk_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_sbrk_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20001c94 	.word	0x20001c94

080065c0 <memchr>:
 80065c0:	4603      	mov	r3, r0
 80065c2:	b510      	push	{r4, lr}
 80065c4:	b2c9      	uxtb	r1, r1
 80065c6:	4402      	add	r2, r0
 80065c8:	4293      	cmp	r3, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	d101      	bne.n	80065d2 <memchr+0x12>
 80065ce:	2000      	movs	r0, #0
 80065d0:	e003      	b.n	80065da <memchr+0x1a>
 80065d2:	7804      	ldrb	r4, [r0, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	428c      	cmp	r4, r1
 80065d8:	d1f6      	bne.n	80065c8 <memchr+0x8>
 80065da:	bd10      	pop	{r4, pc}

080065dc <__swhatbuf_r>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	4615      	mov	r5, r2
 80065e6:	2900      	cmp	r1, #0
 80065e8:	461e      	mov	r6, r3
 80065ea:	b096      	sub	sp, #88	; 0x58
 80065ec:	da0c      	bge.n	8006608 <__swhatbuf_r+0x2c>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	2100      	movs	r1, #0
 80065f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065f6:	bf0c      	ite	eq
 80065f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065fc:	2340      	movne	r3, #64	; 0x40
 80065fe:	2000      	movs	r0, #0
 8006600:	6031      	str	r1, [r6, #0]
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	b016      	add	sp, #88	; 0x58
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	466a      	mov	r2, sp
 800660a:	f000 f849 	bl	80066a0 <_fstat_r>
 800660e:	2800      	cmp	r0, #0
 8006610:	dbed      	blt.n	80065ee <__swhatbuf_r+0x12>
 8006612:	9901      	ldr	r1, [sp, #4]
 8006614:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006618:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800661c:	4259      	negs	r1, r3
 800661e:	4159      	adcs	r1, r3
 8006620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006624:	e7eb      	b.n	80065fe <__swhatbuf_r+0x22>

08006626 <__smakebuf_r>:
 8006626:	898b      	ldrh	r3, [r1, #12]
 8006628:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800662a:	079d      	lsls	r5, r3, #30
 800662c:	4606      	mov	r6, r0
 800662e:	460c      	mov	r4, r1
 8006630:	d507      	bpl.n	8006642 <__smakebuf_r+0x1c>
 8006632:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	2301      	movs	r3, #1
 800663c:	6163      	str	r3, [r4, #20]
 800663e:	b002      	add	sp, #8
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	466a      	mov	r2, sp
 8006644:	ab01      	add	r3, sp, #4
 8006646:	f7ff ffc9 	bl	80065dc <__swhatbuf_r>
 800664a:	9900      	ldr	r1, [sp, #0]
 800664c:	4605      	mov	r5, r0
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff fb04 	bl	8005c5c <_malloc_r>
 8006654:	b948      	cbnz	r0, 800666a <__smakebuf_r+0x44>
 8006656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800665a:	059a      	lsls	r2, r3, #22
 800665c:	d4ef      	bmi.n	800663e <__smakebuf_r+0x18>
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	f043 0302 	orr.w	r3, r3, #2
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	e7e3      	b.n	8006632 <__smakebuf_r+0xc>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	6020      	str	r0, [r4, #0]
 800666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	9b00      	ldr	r3, [sp, #0]
 8006676:	6120      	str	r0, [r4, #16]
 8006678:	6163      	str	r3, [r4, #20]
 800667a:	9b01      	ldr	r3, [sp, #4]
 800667c:	b15b      	cbz	r3, 8006696 <__smakebuf_r+0x70>
 800667e:	4630      	mov	r0, r6
 8006680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006684:	f000 f81e 	bl	80066c4 <_isatty_r>
 8006688:	b128      	cbz	r0, 8006696 <__smakebuf_r+0x70>
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f023 0303 	bic.w	r3, r3, #3
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	431d      	orrs	r5, r3
 800669a:	81a5      	strh	r5, [r4, #12]
 800669c:	e7cf      	b.n	800663e <__smakebuf_r+0x18>
	...

080066a0 <_fstat_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	2300      	movs	r3, #0
 80066a4:	4d06      	ldr	r5, [pc, #24]	; (80066c0 <_fstat_r+0x20>)
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	f7fa f88d 	bl	80007cc <_fstat>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	d102      	bne.n	80066bc <_fstat_r+0x1c>
 80066b6:	682b      	ldr	r3, [r5, #0]
 80066b8:	b103      	cbz	r3, 80066bc <_fstat_r+0x1c>
 80066ba:	6023      	str	r3, [r4, #0]
 80066bc:	bd38      	pop	{r3, r4, r5, pc}
 80066be:	bf00      	nop
 80066c0:	20001c94 	.word	0x20001c94

080066c4 <_isatty_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	2300      	movs	r3, #0
 80066c8:	4d05      	ldr	r5, [pc, #20]	; (80066e0 <_isatty_r+0x1c>)
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f7fa f88b 	bl	80007ea <_isatty>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_isatty_r+0x1a>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_isatty_r+0x1a>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20001c94 	.word	0x20001c94

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
